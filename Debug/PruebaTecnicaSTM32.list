
PruebaTecnicaSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005378  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005520  08005520  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005528  08005528  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005528  08005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005530  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d35a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ae  00000000  00000000  00014396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00016448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ca  00000000  00000000  00016f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215d8  00000000  00000000  0001785a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e678  00000000  00000000  00038e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce1f8  00000000  00000000  000474aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001156a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e5c  00000000  00000000  001156e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00118544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054e8 	.word	0x080054e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080054e8 	.word	0x080054e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ADC_Init>:
/**
 * @brief Inicializa el ADC y lanza la conversión con DMA para NUM_ADC canales.
 *        Llamar esta función para comenzar la adquisición continua.
 */
void ADC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Inicia la conversión ADC en modo DMA, llenando el buffer adc_in con NUM_ADC muestras
    HAL_ADC_Start_DMA(&hadc1, adc_in, NUM_ADC);
 80004f8:	2202      	movs	r2, #2
 80004fa:	4903      	ldr	r1, [pc, #12]	@ (8000508 <ADC_Init+0x14>)
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <ADC_Init+0x18>)
 80004fe:	f000 fe17 	bl	8001130 <HAL_ADC_Start_DMA>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	20000038 	.word	0x20000038

08000510 <ADC_ConvCompleteCallback>:
 *        Actualiza los registros con los valores ADC convertidos a 8 bits.
 *
 * @param hadc Puntero al manejador ADC que generó el callback.
 */
void ADC_ConvCompleteCallback(ADC_HandleTypeDef* hadc)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    // Verifica que la interrupción corresponde al ADC1 (por si hay más ADCs)
    if (hadc->Instance == ADC1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <ADC_ConvCompleteCallback+0x3c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10d      	bne.n	800053e <ADC_ConvCompleteCallback+0x2e>
    {
        // Almacena la lectura del canal 0 en registros[0], escalando de 12 bits a 8 bits (shift 4 bits)
        registros[0] = (uint8_t)(adc_in[0] >> 4);
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <ADC_ConvCompleteCallback+0x40>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	091b      	lsrs	r3, r3, #4
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <ADC_ConvCompleteCallback+0x44>)
 800052e:	701a      	strb	r2, [r3, #0]

        // Almacena la lectura del canal 1 en registros[1], también escalada a 8 bits
        registros[1] = (uint8_t)(adc_in[1] >> 4);
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <ADC_ConvCompleteCallback+0x40>)
 8000532:	885b      	ldrh	r3, [r3, #2]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <ADC_ConvCompleteCallback+0x44>)
 800053c:	705a      	strb	r2, [r3, #1]
    }
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40012000 	.word	0x40012000
 8000550:	20000028 	.word	0x20000028
 8000554:	2000017c 	.word	0x2000017c

08000558 <GPIO_ActualizarModo_PD>:
 * - Si es 0, se configura como entrada sin pull-up ni pull-down.
 *
 * Se reinicializa cada pin para aplicar la nueva configuración.
 */
void GPIO_ActualizarModo_PD(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

    for (int i = 0; i < 8; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e025      	b.n	80005be <GPIO_ActualizarModo_PD+0x66>
    {
        // Selecciona el pin PD8+i
        GPIO_InitStruct.Pin = (1 << (8 + i));
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3308      	adds	r3, #8
 8000576:	2201      	movs	r2, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]

        // Configura modo según registros[2]
        if (registros[2] & (1 << i))
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <GPIO_ActualizarModo_PD+0x78>)
 8000588:	789b      	ldrb	r3, [r3, #2]
 800058a:	461a      	mov	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <GPIO_ActualizarModo_PD+0x48>
        {
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Salida push-pull
 800059a:	2301      	movs	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e001      	b.n	80005a4 <GPIO_ActualizarModo_PD+0x4c>
        }
        else
        {
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;      // Entrada
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
        }

        // Desinicializa y luego inicializa para aplicar cambios
        HAL_GPIO_DeInit(GPIOD, GPIO_InitStruct.Pin);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <GPIO_ActualizarModo_PD+0x7c>)
 80005aa:	f001 ffd7 	bl	800255c <HAL_GPIO_DeInit>
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <GPIO_ActualizarModo_PD+0x7c>)
 80005b4:	f001 fe36 	bl	8002224 <HAL_GPIO_Init>
    for (int i = 0; i < 8; i++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	ddd6      	ble.n	8000572 <GPIO_ActualizarModo_PD+0x1a>
    }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000017c 	.word	0x2000017c
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <GPIO_Escribir_PD>:
 *
 * Cada bit de registros[3] indica si el pin correspondiente debe ir a nivel alto (1)
 * o bajo (0).
 */
void GPIO_Escribir_PD(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e020      	b.n	8000626 <GPIO_Escribir_PD+0x4e>
    {
        // Solo actúa si el pin está configurado como salida
        if (registros[2] & (1 << i))
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <GPIO_Escribir_PD+0x60>)
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <GPIO_Escribir_PD+0x48>
        {
            HAL_GPIO_WritePin(GPIOD, (1 << (8 + i)),
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3308      	adds	r3, #8
 80005fc:	2201      	movs	r2, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b299      	uxth	r1, r3
                (registros[3] & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GPIO_Escribir_PD+0x60>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	fa42 f303 	asr.w	r3, r2, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
            HAL_GPIO_WritePin(GPIOD, (1 << (8 + i)),
 8000618:	461a      	mov	r2, r3
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <GPIO_Escribir_PD+0x64>)
 800061c:	f002 f8b2 	bl	8002784 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b07      	cmp	r3, #7
 800062a:	dddb      	ble.n	80005e4 <GPIO_Escribir_PD+0xc>
        }
    }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000017c 	.word	0x2000017c
 800063c:	40020c00 	.word	0x40020c00

08000640 <GPIO_Leer_PD>:
 * El estado de cada pin se almacena en el bit correspondiente de registros[4].
 * - Bit en 1 si el pin está a nivel alto.
 * - Bit en 0 si el pin está a nivel bajo.
 */
void GPIO_Leer_PD(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
    registros[4] = 0;
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <GPIO_Leer_PD+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	711a      	strb	r2, [r3, #4]

    for (int i = 0; i < 8; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e01e      	b.n	8000690 <GPIO_Leer_PD+0x50>
    {
        GPIO_PinState state = HAL_GPIO_ReadPin(GPIOD, (1 << (8 + i)));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3308      	adds	r3, #8
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	b29b      	uxth	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <GPIO_Leer_PD+0x64>)
 8000662:	f002 f877 	bl	8002754 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	70fb      	strb	r3, [r7, #3]
        if (state == GPIO_PIN_SET)
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10c      	bne.n	800068a <GPIO_Leer_PD+0x4a>
        {
            registros[4] |= (1 << i);
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <GPIO_Leer_PD+0x60>)
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	b25a      	sxtb	r2, r3
 8000676:	2101      	movs	r1, #1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	b25b      	sxtb	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b25b      	sxtb	r3, r3
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <GPIO_Leer_PD+0x60>)
 8000688:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 8; i++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b07      	cmp	r3, #7
 8000694:	dddd      	ble.n	8000652 <GPIO_Leer_PD+0x12>
        }
    }
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000017c 	.word	0x2000017c
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <I2C_Slave_Init>:
/**
 * @brief Inicializa la recepción I2C en modo esclavo con interrupciones.
 * Guarda el handler para comparaciones posteriores.
 */
void I2C_Slave_Init(I2C_HandleTypeDef *hi2c)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    hi2c_ptr = hi2c;
 80006b0:	4a06      	ldr	r2, [pc, #24]	@ (80006cc <I2C_Slave_Init+0x24>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
    // Iniciar recepción interrupt-driven de 2 bytes (registro + dato)
    HAL_I2C_Slave_Receive_IT(hi2c_ptr, i2c_rx_buf, 2);
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <I2C_Slave_Init+0x24>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2202      	movs	r2, #2
 80006bc:	4904      	ldr	r1, [pc, #16]	@ (80006d0 <I2C_Slave_Init+0x28>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa44 	bl	8002b4c <HAL_I2C_Slave_Receive_IT>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000030 	.word	0x20000030

080006d4 <I2C_Slave_AddrCallback>:
/**
 * @brief Callback al detectar dirección I2C (START + dirección).
 * Determina si el maestro va a leer o escribir y prepara la siguiente acción.
 */
void I2C_Slave_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
 80006e0:	4613      	mov	r3, r2
 80006e2:	803b      	strh	r3, [r7, #0]
    if (hi2c->Instance == hi2c_ptr->Instance)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <I2C_Slave_AddrCallback+0x6c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d121      	bne.n	8000736 <I2C_Slave_AddrCallback+0x62>
    {
        // Reiniciar índice de registro al comenzar nueva transferencia
        i2c_reg_index = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <I2C_Slave_AddrCallback+0x70>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]

        // Guardar dirección: 0 = maestro escribe, 1 = maestro lee
        slave_direction = (TransferDirection == I2C_DIRECTION_TRANSMIT) ? 0 : 1;
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <I2C_Slave_AddrCallback+0x74>)
 8000708:	701a      	strb	r2, [r3, #0]

        if (slave_direction == 0) {
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <I2C_Slave_AddrCallback+0x74>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <I2C_Slave_AddrCallback+0x4a>
            // Maestro va a escribir: preparamos recepción de registro + dato
            HAL_I2C_Slave_Receive_IT(hi2c, i2c_rx_buf, 2);
 8000712:	2202      	movs	r2, #2
 8000714:	490d      	ldr	r1, [pc, #52]	@ (800074c <I2C_Slave_AddrCallback+0x78>)
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f002 fa18 	bl	8002b4c <HAL_I2C_Slave_Receive_IT>
            // Maestro va a leer: enviamos primer byte (registro actual)
            i2c_tx_data = registros[i2c_reg_index];
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
        }
    }
}
 800071c:	e00b      	b.n	8000736 <I2C_Slave_AddrCallback+0x62>
            i2c_tx_data = registros[i2c_reg_index];
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <I2C_Slave_AddrCallback+0x70>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <I2C_Slave_AddrCallback+0x7c>)
 8000726:	5c9a      	ldrb	r2, [r3, r2]
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <I2C_Slave_AddrCallback+0x80>)
 800072a:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	4909      	ldr	r1, [pc, #36]	@ (8000754 <I2C_Slave_AddrCallback+0x80>)
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f002 f99b 	bl	8002a6c <HAL_I2C_Slave_Transmit_IT>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000034 	.word	0x20000034
 8000744:	2000002c 	.word	0x2000002c
 8000748:	2000002d 	.word	0x2000002d
 800074c:	20000030 	.word	0x20000030
 8000750:	2000017c 	.word	0x2000017c
 8000754:	20000032 	.word	0x20000032

08000758 <I2C_Slave_RxCpltCallback>:
/**
 * @brief Callback al completar la recepción de 2 bytes (registro + dato).
 * Actualiza el registro correspondiente y vuelve a preparar recepción.
 */
void I2C_Slave_RxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c_ptr->Instance)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <I2C_Slave_RxCpltCallback+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d10f      	bne.n	800078e <I2C_Slave_RxCpltCallback+0x36>
    {
        // El primer byte es el índice de registro
        i2c_reg_index = i2c_rx_buf[0];
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <I2C_Slave_RxCpltCallback+0x44>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <I2C_Slave_RxCpltCallback+0x48>)
 8000774:	701a      	strb	r2, [r3, #0]

        // El segundo byte es el dato que escribimos en ese registro
        registros[i2c_reg_index] = i2c_rx_buf[1];
 8000776:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <I2C_Slave_RxCpltCallback+0x48>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <I2C_Slave_RxCpltCallback+0x44>)
 800077e:	7859      	ldrb	r1, [r3, #1]
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <I2C_Slave_RxCpltCallback+0x4c>)
 8000782:	5499      	strb	r1, [r3, r2]

        // Re-armar la recepción para seguir escuchando datos
        HAL_I2C_Slave_Receive_IT(hi2c, i2c_rx_buf, 2);
 8000784:	2202      	movs	r2, #2
 8000786:	4905      	ldr	r1, [pc, #20]	@ (800079c <I2C_Slave_RxCpltCallback+0x44>)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f002 f9df 	bl	8002b4c <HAL_I2C_Slave_Receive_IT>
    }
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000034 	.word	0x20000034
 800079c:	20000030 	.word	0x20000030
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	2000017c 	.word	0x2000017c

080007a8 <I2C_Slave_TxCpltCallback>:
/**
 * @brief Callback al completar la transmisión de un byte.
 * Prepara el siguiente byte a transmitir (mismo registro).
 */
void I2C_Slave_TxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c_ptr->Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <I2C_Slave_TxCpltCallback+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d10f      	bne.n	80007de <I2C_Slave_TxCpltCallback+0x36>
    {
        // Verificar que el índice no exceda el número de registros
        if (i2c_reg_index < NUM_REGISTROS)
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <I2C_Slave_TxCpltCallback+0x44>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b09      	cmp	r3, #9
 80007c4:	d80b      	bhi.n	80007de <I2C_Slave_TxCpltCallback+0x36>
        {
            // Enviar nuevamente el dato actual del registro
            i2c_tx_data = registros[i2c_reg_index];
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <I2C_Slave_TxCpltCallback+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <I2C_Slave_TxCpltCallback+0x48>)
 80007ce:	5c9a      	ldrb	r2, [r3, r2]
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <I2C_Slave_TxCpltCallback+0x4c>)
 80007d2:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	4907      	ldr	r1, [pc, #28]	@ (80007f4 <I2C_Slave_TxCpltCallback+0x4c>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f002 f947 	bl	8002a6c <HAL_I2C_Slave_Transmit_IT>
        }
    }
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000034 	.word	0x20000034
 80007ec:	2000002c 	.word	0x2000002c
 80007f0:	2000017c 	.word	0x2000017c
 80007f4:	20000032 	.word	0x20000032

080007f8 <main>:
/**
  * @brief  Main program entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* Inicialización HAL y sistema */
  HAL_Init();
 80007fe:	f000 fbbd 	bl	8000f7c <HAL_Init>

  /* Configura el reloj del sistema */
  SystemClock_Config();
 8000802:	f000 f829 	bl	8000858 <SystemClock_Config>

  /* Inicializa periféricos configurados */
  MX_GPIO_Init();
 8000806:	f000 f95d 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 800080a:	f000 f93b 	bl	8000a84 <MX_DMA_Init>
  MX_ADC1_Init();
 800080e:	f000 f87f 	bl	8000910 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000812:	f000 f8df 	bl	80009d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000816:	f000 f90b 	bl	8000a30 <MX_USART1_UART_Init>

  /* Inicialización de módulos específicos */
  ADC_Init();              // Inicia ADC con DMA para lectura continua
 800081a:	f7ff fe6b 	bl	80004f4 <ADC_Init>
  I2C_Slave_Init(&hi2c1);  // Inicia I2C en modo esclavo con interrupciones
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <main+0x58>)
 8000820:	f7ff ff42 	bl	80006a8 <I2C_Slave_Init>
  uint8_t modo_anterior = registros[2];
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <main+0x5c>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	71fb      	strb	r3, [r7, #7]
  /* Bucle principal: sin lógica activa, todo por interrupciones */
  while (1)
  {
      // Lee el estado actual de los pines PD8 a PD15
      GPIO_Leer_PD();
 800082a:	f7ff ff09 	bl	8000640 <GPIO_Leer_PD>

      // Si el modo configurado de los pines (guardado en registros[2]) ha cambiado,
      // actualiza la configuración (entrada/salida) de cada pin.
      if (modo_anterior != registros[2])
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <main+0x5c>)
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	429a      	cmp	r2, r3
 8000836:	d004      	beq.n	8000842 <main+0x4a>
      {
          GPIO_ActualizarModo_PD();
 8000838:	f7ff fe8e 	bl	8000558 <GPIO_ActualizarModo_PD>
          modo_anterior = registros[2];  // Guarda el modo actual para próximas comparaciones
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <main+0x5c>)
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	71fb      	strb	r3, [r7, #7]
      }

      // Escribe el valor almacenado en registros[3] en los pines configurados como salida
      GPIO_Escribir_PD();
 8000842:	f7ff fec9 	bl	80005d8 <GPIO_Escribir_PD>

      // Retardo para evitar que el loop corra demasiado rápido y saturar el bus o procesador
      HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f000 fc0a 	bl	8001060 <HAL_Delay>
      GPIO_Leer_PD();
 800084c:	e7ed      	b.n	800082a <main+0x32>
 800084e:	bf00      	nop
 8000850:	200000e0 	.word	0x200000e0
 8000854:	2000017c 	.word	0x2000017c

08000858 <SystemClock_Config>:

/**
  * @brief Configura el reloj del sistema para usar HSE sin PLL
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fe12 	bl	8005490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <SystemClock_Config+0xb0>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a20      	ldr	r2, [pc, #128]	@ (8000908 <SystemClock_Config+0xb0>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <SystemClock_Config+0xb0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <SystemClock_Config+0xb4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	@ (800090c <SystemClock_Config+0xb4>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <SystemClock_Config+0xb4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  // Configura oscilador externo HSE y desactiva PLL
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fe86 	bl	80045d8 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x7e>
 80008d2:	f000 f982 	bl	8000bda <Error_Handler>

  // Configura relojes de CPU y buses para usar HSE directamente
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) { Error_Handler(); }
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 f8e9 	bl	8004ac8 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xa8>
 80008fc:	f000 f96d 	bl	8000bda <Error_Handler>
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	@ 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_ADC1_Init>:

/**
  * @brief Inicializa ADC1 para lectura continua con DMA, 2 canales (PA0 y PA1)
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000924:	4a29      	ldr	r2, [pc, #164]	@ (80009cc <MX_ADC1_Init+0xbc>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;               // Escanea varios canales
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000936:	2201      	movs	r2, #1
 8000938:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;         // Conversión continua
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 800093c:	2201      	movs	r2, #1
 800093e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 800094a:	2200      	movs	r2, #0
 800094c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000950:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <MX_ADC1_Init+0xc0>)
 8000952:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;                  // 2 canales
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 800095c:	2202      	movs	r2, #2
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;      // Usa DMA para transferir datos
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000962:	2201      	movs	r2, #1
 8000964:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 800096a:	2201      	movs	r2, #1
 800096c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 800096e:	4816      	ldr	r0, [pc, #88]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000970:	f000 fb9a 	bl	80010a8 <HAL_ADC_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x6e>
 800097a:	f000 f92e 	bl	8000bda <Error_Handler>

  // Configura canal 0 (PA0)
  sConfig.Channel = ADC_CHANNEL_0;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000986:	2307      	movs	r3, #7
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	480e      	ldr	r0, [pc, #56]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 8000990:	f000 fcf6 	bl	8001380 <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x8e>
 800099a:	f000 f91e 	bl	8000bda <Error_Handler>

  // Configura canal 1 (PA1)
  sConfig.Channel = ADC_CHANNEL_1;
 800099e:	2301      	movs	r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009a6:	2307      	movs	r3, #7
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <MX_ADC1_Init+0xb8>)
 80009b0:	f000 fce6 	bl	8001380 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xae>
 80009ba:	f000 f90e 	bl	8000bda <Error_Handler>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000038 	.word	0x20000038
 80009cc:	40012000 	.word	0x40012000
 80009d0:	0f000001 	.word	0x0f000001

080009d4 <MX_I2C1_Init>:

/**
  * @brief Inicializa I2C1 en modo esclavo con dirección 0x20 (32 decimal)
  */
static void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <MX_I2C1_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;               // 100 kHz estándar
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x50 << 1;                  // Dirección esclavo 0x50
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009ec:	22a0      	movs	r2, #160	@ 0xa0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_I2C1_Init+0x50>)
 8000a12:	f001 fed1 	bl	80027b8 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x4c>
 8000a1c:	f000 f8dd 	bl	8000bda <Error_Handler>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000e0 	.word	0x200000e0
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <MX_USART1_UART_Init>:

/**
  * @brief Inicializa USART1 para comunicación serial a 115200 baudios
  */
static void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_USART1_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) { Error_Handler(); }
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a68:	f004 fa4e 	bl	8004f08 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x46>
 8000a72:	f000 f8b2 	bl	8000bda <Error_Handler>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000134 	.word	0x20000134
 8000a80:	40011000 	.word	0x40011000

08000a84 <MX_DMA_Init>:

/**
  * @brief Inicializa el controlador DMA y habilita la interrupción
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_DMA_Init+0x3c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <MX_DMA_Init+0x3c>)
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_DMA_Init+0x3c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  // Configura prioridad e interrupción para DMA2_Stream0 (usado por ADC1)
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2038      	movs	r0, #56	@ 0x38
 8000aac:	f000 ffe3 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab0:	2038      	movs	r0, #56	@ 0x38
 8000ab2:	f000 fffc 	bl	8001aae <HAL_NVIC_EnableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:

/**
  * @brief Inicializa los puertos GPIO usados
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
	  /* USER CODE BEGIN MX_GPIO_Init_1 */

	  /* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a22      	ldr	r2, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_GPIO_Init+0xa8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

	  /* Configura GPIO pins : PD8 PD9 PD10 PD11
	                           PD12 PD13 PD14 PD15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b4a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000b4e:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_GPIO_Init+0xac>)
 8000b60:	f001 fb60 	bl	8002224 <HAL_GPIO_Init>

	  /* USER CODE BEGIN MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <HAL_ADC_ConvCpltCallback>:

/* Callbacks que redirigen a funciones específicas de ADC e I2C */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    ADC_ConvCompleteCallback(hadc);  // Manejo lectura ADC completa
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fcc7 	bl	8000510 <ADC_ConvCompleteCallback>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]
 8000b96:	4613      	mov	r3, r2
 8000b98:	803b      	strh	r3, [r7, #0]
    I2C_Slave_AddrCallback(hi2c, TransferDirection, AddrMatchCode);  // Dirección I2C detectada
 8000b9a:	883a      	ldrh	r2, [r7, #0]
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fd97 	bl	80006d4 <I2C_Slave_AddrCallback>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
    I2C_Slave_RxCpltCallback(hi2c);  // Recepción I2C completa
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fdce 	bl	8000758 <I2C_Slave_RxCpltCallback>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    I2C_Slave_TxCpltCallback(hi2c);  // Transmisión I2C completa
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fdeb 	bl	80007a8 <I2C_Slave_TxCpltCallback>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <Error_Handler>:

/**
  * @brief Función de manejo de errores: se detiene el sistema en bucle infinito.
  */
void Error_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bde:	b672      	cpsid	i
}
 8000be0:	bf00      	nop
  __disable_irq();
  while (1)
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a2f      	ldr	r2, [pc, #188]	@ (8000d14 <HAL_ADC_MspInit+0xdc>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d157      	bne.n	8000d0a <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a2d      	ldr	r2, [pc, #180]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a26      	ldr	r2, [pc, #152]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <HAL_ADC_MspInit+0xe0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c92:	2303      	movs	r3, #3
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481d      	ldr	r0, [pc, #116]	@ (8000d1c <HAL_ADC_MspInit+0xe4>)
 8000ca6:	f001 fabd 	bl	8002224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cac:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000ccc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cee:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000cf0:	f000 fef8 	bl	8001ae4 <HAL_DMA_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cfa:	f7ff ff6e 	bl	8000bda <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000d02:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	@ 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40012000 	.word	0x40012000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	20000080 	.word	0x20000080
 8000d24:	40026410 	.word	0x40026410

08000d28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a21      	ldr	r2, [pc, #132]	@ (8000dcc <HAL_I2C_MspInit+0xa4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d13b      	bne.n	8000dc2 <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d66:	23c0      	movs	r3, #192	@ 0xc0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6a:	2312      	movs	r3, #18
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d76:	2304      	movs	r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <HAL_I2C_MspInit+0xac>)
 8000d82:	f001 fa4f 	bl	8002224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_I2C_MspInit+0xa8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201f      	movs	r0, #31
 8000da8:	f000 fe65 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000dac:	201f      	movs	r0, #31
 8000dae:	f000 fe7e 	bl	8001aae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2020      	movs	r0, #32
 8000db8:	f000 fe5d 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	f000 fe76 	bl	8001aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <HAL_UART_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12c      	bne.n	8000e54 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_UART_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x8c>)
 8000e50:	f001 f9e8 	bl	8002224 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f8af 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <I2C1_EV_IRQHandler+0x10>)
 8000ece:	f001 fead 	bl	8002c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000e0 	.word	0x200000e0

08000edc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <I2C1_ER_IRQHandler+0x10>)
 8000ee2:	f002 f814 	bl	8002f0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000e0 	.word	0x200000e0

08000ef0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <DMA2_Stream0_IRQHandler+0x10>)
 8000ef6:	f000 ff1d 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000080 	.word	0x20000080

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f004 faa3 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fc4d 	bl	80007f8 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f6c:	08005530 	.word	0x08005530
  ldr r2, =_sbss
 8000f70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f74:	2000018c 	.word	0x2000018c

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fd5b 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fe1a 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd73 	bl	8001aca <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ffc:	f000 fd3b 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000188 	.word	0x20000188

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000188 	.word	0x20000188

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e033      	b.n	8001126 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fdb6 	bl	8000c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010ee:	f023 0302 	bic.w	r3, r3, #2
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa62 	bl	80015c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f023 0303 	bic.w	r3, r3, #3
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40
 8001116:	e001      	b.n	800111c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Start_DMA+0x22>
 800114e:	2302      	movs	r3, #2
 8001150:	e0eb      	b.n	800132a <HAL_ADC_Start_DMA+0x1fa>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d018      	beq.n	800119a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001178:	4b6e      	ldr	r3, [pc, #440]	@ (8001334 <HAL_ADC_Start_DMA+0x204>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6e      	ldr	r2, [pc, #440]	@ (8001338 <HAL_ADC_Start_DMA+0x208>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9a      	lsrs	r2, r3, #18
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3b01      	subs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a8:	d107      	bne.n	80011ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 80a3 	bne.w	8001310 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001208:	d106      	bne.n	8001218 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f023 0206 	bic.w	r2, r3, #6
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44
 8001216:	e002      	b.n	800121e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001226:	4b45      	ldr	r3, [pc, #276]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 8001228:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122e:	4a44      	ldr	r2, [pc, #272]	@ (8001340 <HAL_ADC_Start_DMA+0x210>)
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001236:	4a43      	ldr	r2, [pc, #268]	@ (8001344 <HAL_ADC_Start_DMA+0x214>)
 8001238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <HAL_ADC_Start_DMA+0x218>)
 8001240:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800124a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800125a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800126a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	334c      	adds	r3, #76	@ 0x4c
 8001276:	4619      	mov	r1, r3
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f000 fce0 	bl	8001c40 <HAL_DMA_Start_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12a      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2d      	ldr	r2, [pc, #180]	@ (800134c <HAL_ADC_Start_DMA+0x21c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d015      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x196>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2c      	ldr	r2, [pc, #176]	@ (8001350 <HAL_ADC_Start_DMA+0x220>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_Start_DMA+0x180>
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_ADC_Start_DMA+0x224>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d136      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d130      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d129      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e020      	b.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <HAL_ADC_Start_DMA+0x21c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d11b      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d114      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f043 0210 	orr.w	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001328:	7ffb      	ldrb	r3, [r7, #31]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	080017bd 	.word	0x080017bd
 8001344:	08001877 	.word	0x08001877
 8001348:	08001893 	.word	0x08001893
 800134c:	40012000 	.word	0x40012000
 8001350:	40012100 	.word	0x40012100
 8001354:	40012200 	.word	0x40012200

08001358 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1c>
 8001398:	2302      	movs	r3, #2
 800139a:	e105      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x228>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b09      	cmp	r3, #9
 80013aa:	d925      	bls.n	80013f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68d9      	ldr	r1, [r3, #12]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	3b1e      	subs	r3, #30
 80013c2:	2207      	movs	r2, #7
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43da      	mvns	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	400a      	ands	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68d9      	ldr	r1, [r3, #12]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4403      	add	r3, r0
 80013ea:	3b1e      	subs	r3, #30
 80013ec:	409a      	lsls	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e022      	b.n	800143e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6919      	ldr	r1, [r3, #16]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	2207      	movs	r2, #7
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	4603      	mov	r3, r0
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4403      	add	r3, r0
 8001434:	409a      	lsls	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b06      	cmp	r3, #6
 8001444:	d824      	bhi.n	8001490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3b05      	subs	r3, #5
 8001458:	221f      	movs	r2, #31
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	400a      	ands	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b05      	subs	r3, #5
 8001482:	fa00 f203 	lsl.w	r2, r0, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
 800148e:	e04c      	b.n	800152a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d824      	bhi.n	80014e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b23      	subs	r3, #35	@ 0x23
 80014aa:	221f      	movs	r2, #31
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43da      	mvns	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	400a      	ands	r2, r1
 80014b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b23      	subs	r3, #35	@ 0x23
 80014d4:	fa00 f203 	lsl.w	r2, r0, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e0:	e023      	b.n	800152a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b41      	subs	r3, #65	@ 0x41
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b41      	subs	r3, #65	@ 0x41
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152a:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <HAL_ADC_ConfigChannel+0x234>)
 800152c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <HAL_ADC_ConfigChannel+0x238>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d109      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1cc>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d105      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <HAL_ADC_ConfigChannel+0x238>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d123      	bne.n	800159e <HAL_ADC_ConfigChannel+0x21e>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b10      	cmp	r3, #16
 800155c:	d003      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x1e6>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b11      	cmp	r3, #17
 8001564:	d11b      	bne.n	800159e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b10      	cmp	r3, #16
 8001578:	d111      	bne.n	800159e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_ADC_ConfigChannel+0x23c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_ADC_ConfigChannel+0x240>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9a      	lsrs	r2, r3, #18
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001590:	e002      	b.n	8001598 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3b01      	subs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40012300 	.word	0x40012300
 80015b8:	40012000 	.word	0x40012000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	431bde83 	.word	0x431bde83

080015c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015cc:	4b79      	ldr	r3, [pc, #484]	@ (80017b4 <ADC_Init+0x1f0>)
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	021a      	lsls	r2, r3, #8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800161c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800163e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <ADC_Init+0x1f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d022      	beq.n	80016a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800166a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800168c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	e00f      	b.n	80016c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0202 	bic.w	r2, r2, #2
 80016d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	005a      	lsls	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800170e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171a:	3b01      	subs	r3, #1
 800171c:	035a      	lsls	r2, r3, #13
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e007      	b.n	8001738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001736:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	3b01      	subs	r3, #1
 8001754:	051a      	lsls	r2, r3, #20
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800176c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800177a:	025a      	lsls	r2, r3, #9
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	029a      	lsls	r2, r3, #10
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40012300 	.word	0x40012300
 80017b8:	0f000001 	.word	0x0f000001

080017bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d13c      	bne.n	8001850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d12b      	bne.n	8001848 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d127      	bne.n	8001848 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0220 	bic.w	r2, r2, #32
 8001822:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff f993 	bl	8000b74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800184e:	e00e      	b.n	800186e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fd85 	bl	800136c <HAL_ADC_ErrorCallback>
}
 8001862:	e004      	b.n	800186e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001882:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fd67 	bl	8001358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f043 0204 	orr.w	r2, r3, #4
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fd5a 	bl	800136c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	@ (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	@ (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff faaa 	bl	8001048 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e099      	b.n	8001c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fa91 	bl	8001048 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d908      	bls.n	8001b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e078      	b.n	8001c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e8      	bne.n	8001b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_DMA_Init+0x158>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d117      	bne.n	8001c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa9f 	bl	800212c <DMA_CheckFifoParam>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c02:	2301      	movs	r3, #1
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa56 	bl	80020c0 <DMA_CalcBaseAndBitshift>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	223f      	movs	r2, #63	@ 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	f010803f 	.word	0xf010803f

08001c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Start_IT+0x26>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e040      	b.n	8001ce8 <HAL_DMA_Start_IT+0xa8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12f      	bne.n	8001cda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f9e8 	bl	8002064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c98:	223f      	movs	r2, #63	@ 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0216 	orr.w	r2, r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0208 	orr.w	r2, r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e005      	b.n	8001ce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d004      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00c      	b.n	8001d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d40:	4b8e      	ldr	r3, [pc, #568]	@ (8001f7c <HAL_DMA_IRQHandler+0x248>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a8e      	ldr	r2, [pc, #568]	@ (8001f80 <HAL_DMA_IRQHandler+0x24c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808f 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8087 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	223f      	movs	r2, #63	@ 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07e      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e079      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d031      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02c      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e01e      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0210 	bic.w	r2, r2, #16
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d032      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d307      	bcc.n	800201c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <HAL_DMA_IRQHandler+0x2cc>
 800201a:	e000      	b.n	800201e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800201c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	e000      	b.n	8002042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002040:	bf00      	nop
    }
  }
}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002056:	b2db      	uxtb	r3, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b40      	cmp	r3, #64	@ 0x40
 8002090:	d108      	bne.n	80020a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020a2:	e007      	b.n	80020b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3b10      	subs	r3, #16
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <DMA_CalcBaseAndBitshift+0x64>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020da:	4a13      	ldr	r2, [pc, #76]	@ (8002128 <DMA_CalcBaseAndBitshift+0x68>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d909      	bls.n	8002102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	1d1a      	adds	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002100:	e007      	b.n	8002112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	aaaaaaab 	.word	0xaaaaaaab
 8002128:	08005518 	.word	0x08005518

0800212c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d856      	bhi.n	80021fa <DMA_CheckFifoParam+0xce>
 800214c:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <DMA_CheckFifoParam+0x28>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002165 	.word	0x08002165
 8002158:	08002177 	.word	0x08002177
 800215c:	08002165 	.word	0x08002165
 8002160:	080021fb 	.word	0x080021fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d046      	beq.n	80021fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002174:	e043      	b.n	80021fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800217e:	d140      	bne.n	8002202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002184:	e03d      	b.n	8002202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218e:	d121      	bne.n	80021d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d837      	bhi.n	8002206 <DMA_CheckFifoParam+0xda>
 8002196:	a201      	add	r2, pc, #4	@ (adr r2, 800219c <DMA_CheckFifoParam+0x70>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b3 	.word	0x080021b3
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	080021c5 	.word	0x080021c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e030      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d025      	beq.n	800220a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c2:	e022      	b.n	800220a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021cc:	d11f      	bne.n	800220e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021d2:	e01c      	b.n	800220e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d903      	bls.n	80021e2 <DMA_CheckFifoParam+0xb6>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d003      	beq.n	80021e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e0:	e018      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      break;
 80021e6:	e015      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e00b      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 80021fa:	bf00      	nop
 80021fc:	e00a      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e008      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e006      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e004      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e002      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;   
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
    }
  } 
  
  return status; 
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e16b      	b.n	8002518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 815a 	bne.w	8002512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80b4 	beq.w	8002512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b60      	ldr	r3, [pc, #384]	@ (8002530 <HAL_GPIO_Init+0x30c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002530 <HAL_GPIO_Init+0x30c>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <HAL_GPIO_Init+0x30c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002534 <HAL_GPIO_Init+0x310>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_GPIO_Init+0x314>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x226>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	@ (800253c <HAL_GPIO_Init+0x318>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x222>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <HAL_GPIO_Init+0x31c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x21e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	@ (8002544 <HAL_GPIO_Init+0x320>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x21a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	@ (8002548 <HAL_GPIO_Init+0x324>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x216>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4d      	ldr	r2, [pc, #308]	@ (800254c <HAL_GPIO_Init+0x328>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x212>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4c      	ldr	r2, [pc, #304]	@ (8002550 <HAL_GPIO_Init+0x32c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4b      	ldr	r2, [pc, #300]	@ (8002554 <HAL_GPIO_Init+0x330>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x20a>
 800242a:	2307      	movs	r3, #7
 800242c:	e00e      	b.n	800244c <HAL_GPIO_Init+0x228>
 800242e:	2308      	movs	r3, #8
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002432:	2306      	movs	r3, #6
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x228>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x228>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x228>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x228>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	@ (8002534 <HAL_GPIO_Init+0x310>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_GPIO_Init+0x334>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <HAL_GPIO_Init+0x334>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a27      	ldr	r2, [pc, #156]	@ (8002558 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_GPIO_Init+0x334>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <HAL_GPIO_Init+0x334>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <HAL_GPIO_Init+0x334>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <HAL_GPIO_Init+0x334>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f ae90 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40021400 	.word	0x40021400
 8002550:	40021800 	.word	0x40021800
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e0cd      	b.n	8002714 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002578:	2201      	movs	r2, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	f040 80bd 	bne.w	800270e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002594:	4a65      	ldr	r2, [pc, #404]	@ (800272c <HAL_GPIO_DeInit+0x1d0>)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002730 <HAL_GPIO_DeInit+0x1d4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_DeInit+0xba>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002734 <HAL_GPIO_DeInit+0x1d8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_DeInit+0xb6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a5b      	ldr	r2, [pc, #364]	@ (8002738 <HAL_GPIO_DeInit+0x1dc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_DeInit+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a5a      	ldr	r2, [pc, #360]	@ (800273c <HAL_GPIO_DeInit+0x1e0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_DeInit+0xae>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <HAL_GPIO_DeInit+0x1e4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_DeInit+0xaa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <HAL_GPIO_DeInit+0x1e8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_DeInit+0xa6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a57      	ldr	r2, [pc, #348]	@ (8002748 <HAL_GPIO_DeInit+0x1ec>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_DeInit+0xa2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a56      	ldr	r2, [pc, #344]	@ (800274c <HAL_GPIO_DeInit+0x1f0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00e      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e00c      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 80025fe:	2306      	movs	r3, #6
 8002600:	e00a      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 8002602:	2305      	movs	r3, #5
 8002604:	e008      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 8002606:	2304      	movs	r3, #4
 8002608:	e006      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_DeInit+0xbc>
 8002616:	2300      	movs	r3, #0
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d132      	bne.n	800268e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002628:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	4947      	ldr	r1, [pc, #284]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 8002632:	4013      	ands	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002636:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	4944      	ldr	r1, [pc, #272]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 8002640:	4013      	ands	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002644:	4b42      	ldr	r3, [pc, #264]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	4940      	ldr	r1, [pc, #256]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 800264e:	4013      	ands	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002652:	4b3f      	ldr	r3, [pc, #252]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	493d      	ldr	r1, [pc, #244]	@ (8002750 <HAL_GPIO_DeInit+0x1f4>)
 800265c:	4013      	ands	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002670:	4a2e      	ldr	r2, [pc, #184]	@ (800272c <HAL_GPIO_DeInit+0x1d0>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	43da      	mvns	r2, r3
 8002680:	482a      	ldr	r0, [pc, #168]	@ (800272c <HAL_GPIO_DeInit+0x1d0>)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	400a      	ands	r2, r1
 8002688:	3302      	adds	r3, #2
 800268a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2103      	movs	r1, #3
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	08d2      	lsrs	r2, r2, #3
 80026c4:	4019      	ands	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2103      	movs	r1, #3
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	2101      	movs	r1, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2103      	movs	r1, #3
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	401a      	ands	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f af2e 	bls.w	8002578 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40021400 	.word	0x40021400
 8002748:	40021800 	.word	0x40021800
 800274c:	40021c00 	.word	0x40021c00
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e12b      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe faa2 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	@ 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f002 fb4c 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a81      	ldr	r2, [pc, #516]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a80      	ldr	r2, [pc, #512]	@ (8002a30 <HAL_I2C_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a34 <HAL_I2C_Init+0x27c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0e7      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <HAL_I2C_Init+0x280>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a6a      	ldr	r2, [pc, #424]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a69      	ldr	r2, [pc, #420]	@ (8002a3c <HAL_I2C_Init+0x284>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	495c      	ldr	r1, [pc, #368]	@ (8002a2c <HAL_I2C_Init+0x274>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d819      	bhi.n	80028f4 <HAL_I2C_Init+0x13c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_I2C_Init+0x138>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	e051      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x168>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x18e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x196>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a52:	2b80      	cmp	r3, #128	@ 0x80
 8002a54:	d103      	bne.n	8002a5e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d158      	bne.n	8002b38 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_I2C_Slave_Transmit_IT+0x26>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e051      	b.n	8002b3a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_I2C_Slave_Transmit_IT+0x38>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e04a      	b.n	8002b3a <HAL_I2C_Slave_Transmit_IT+0xce>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d007      	beq.n	8002aca <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	@ 0x21
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8002b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002b32:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	ffff0000 	.word	0xffff0000

08002b4c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d158      	bne.n	8002c18 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_I2C_Slave_Receive_IT+0x26>
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e051      	b.n	8002c1a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_I2C_Slave_Receive_IT+0x38>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e04a      	b.n	8002c1a <HAL_I2C_Slave_Receive_IT+0xce>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d007      	beq.n	8002baa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2222      	movs	r2, #34	@ 0x22
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c28 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8002bea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002c12:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d003      	beq.n	8002c64 <HAL_I2C_EV_IRQHandler+0x38>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b40      	cmp	r3, #64	@ 0x40
 8002c60:	f040 80c1 	bne.w	8002de6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_I2C_EV_IRQHandler+0x6e>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c84:	d003      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x62>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0x66>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_I2C_EV_IRQHandler+0x68>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f000 8132 	beq.w	8002efe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 fc75 	bl	80045a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fd79 	bl	80037ae <I2C_Master_SB>
 8002cbc:	e092      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fdef 	bl	80038ba <I2C_Master_ADD10>
 8002cdc:	e082      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fe09 	bl	800390e <I2C_Master_ADDR>
 8002cfc:	e072      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03b      	beq.n	8002d82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d18:	f000 80f3 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f9d1 	bl	80030e8 <I2C_MasterTransmit_TXE>
 8002d46:	e04d      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80d6 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80cf 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2b21      	cmp	r3, #33	@ 0x21
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa58 	bl	8003220 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d70:	e0c7      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	f040 80c4 	bne.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fac6 	bl	800330c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	e0bf      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d90:	f000 80b7 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fb3f 	bl	800343c <I2C_MasterReceive_RXNE>
 8002dbe:	e011      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 809a 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8093 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fbf5 	bl	80035cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	e08e      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002de4:	e08d      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e007      	b.n	8002e08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ffba 	bl	8003dac <I2C_Slave_ADDR>
 8002e38:	e066      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fff4 	bl	8003e40 <I2C_Slave_STOPF>
 8002e58:	e056      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	2b21      	cmp	r3, #33	@ 0x21
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e60:	7bbb      	ldrb	r3, [r7, #14]
 8002e62:	2b29      	cmp	r3, #41	@ 0x29
 8002e64:	d125      	bne.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	09db      	lsrs	r3, r3, #7
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a9b      	lsrs	r3, r3, #10
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fed0 	bl	8003c30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e90:	e039      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d033      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02d      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fefd 	bl	8003caa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb0:	e029      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0a9b      	lsrs	r3, r3, #10
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 ff08 	bl	8003cec <I2C_SlaveReceive_RXNE>
 8002edc:	e014      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00e      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 ff36 	bl	8003d68 <I2C_SlaveReceive_BTF>
 8002efc:	e004      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08a      	sub	sp, #40	@ 0x28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <HAL_I2C_ER_IRQHandler+0x4e>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	0a5b      	lsrs	r3, r3, #9
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_I2C_ER_IRQHandler+0x78>
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002f84:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	0a9b      	lsrs	r3, r3, #10
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03f      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x104>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d039      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002f9e:	7efb      	ldrb	r3, [r7, #27]
 8002fa0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002fb8:	7ebb      	ldrb	r3, [r7, #26]
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d112      	bne.n	8002fe4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b21      	cmp	r3, #33	@ 0x21
 8002fc8:	d008      	beq.n	8002fdc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	2b29      	cmp	r3, #41	@ 0x29
 8002fce:	d005      	beq.n	8002fdc <HAL_I2C_ER_IRQHandler+0xce>
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b28      	cmp	r3, #40	@ 0x28
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b21      	cmp	r3, #33	@ 0x21
 8002fda:	d103      	bne.n	8002fe4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f001 f85f 	bl	80040a0 <I2C_Slave_AF>
 8002fe2:	e016      	b.n	8003012 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ff6:	7efb      	ldrb	r3, [r7, #27]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d002      	beq.n	8003002 <HAL_I2C_ER_IRQHandler+0xf4>
 8002ffc:	7efb      	ldrb	r3, [r7, #27]
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d107      	bne.n	8003012 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003010:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	0adb      	lsrs	r3, r3, #11
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <HAL_I2C_ER_IRQHandler+0x12e>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800303a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 f89a 	bl	8004188 <I2C_ITError>
  }
}
 8003054:	bf00      	nop
 8003056:	3728      	adds	r7, #40	@ 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d150      	bne.n	80031b0 <I2C_MasterTransmit_TXE+0xc8>
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b21      	cmp	r3, #33	@ 0x21
 8003112:	d14d      	bne.n	80031b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d01d      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b20      	cmp	r3, #32
 800311e:	d01a      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003126:	d016      	beq.n	8003156 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003136:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2211      	movs	r2, #17
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff84 	bl	800305c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003154:	e060      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003164:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003174:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d107      	bne.n	80031a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff7d 	bl	8003098 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800319e:	e03b      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff57 	bl	800305c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ae:	e033      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b21      	cmp	r3, #33	@ 0x21
 80031b4:	d005      	beq.n	80031c2 <I2C_MasterTransmit_TXE+0xda>
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d12d      	bne.n	8003218 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b22      	cmp	r3, #34	@ 0x22
 80031c0:	d12a      	bne.n	8003218 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031dc:	e01c      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d103      	bne.n	80031f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f88e 	bl	800330c <I2C_MemoryTransmit_TXE_BTF>
}
 80031f0:	e012      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003216:	e7ff      	b.n	8003218 <I2C_MasterTransmit_TXE+0x130>
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b21      	cmp	r3, #33	@ 0x21
 8003238:	d164      	bne.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003268:	e04c      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d01d      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b20      	cmp	r3, #32
 8003274:	d01a      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800327c:	d016      	beq.n	80032ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800328c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2211      	movs	r2, #17
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fed9 	bl	800305c <HAL_I2C_MasterTxCpltCallback>
}
 80032aa:	e02b      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d107      	bne.n	80032f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fed2 	bl	8003098 <HAL_I2C_MemTxCpltCallback>
}
 80032f4:	e006      	b.n	8003304 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff feac 	bl	800305c <HAL_I2C_MasterTxCpltCallback>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11d      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10b      	bne.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003342:	e077      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	b29b      	uxth	r3, r3
 800334a:	121b      	asrs	r3, r3, #8
 800334c:	b2da      	uxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800335e:	e069      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10b      	bne.n	8003380 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	b2da      	uxtb	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800337e:	e059      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	2b02      	cmp	r3, #2
 8003386:	d152      	bne.n	800342e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b22      	cmp	r3, #34	@ 0x22
 800338c:	d10d      	bne.n	80033aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033a8:	e044      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b21      	cmp	r3, #33	@ 0x21
 80033b8:	d112      	bne.n	80033e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033de:	e029      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d124      	bne.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b21      	cmp	r3, #33	@ 0x21
 80033ee:	d121      	bne.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fe36 	bl	8003098 <HAL_I2C_MemTxCpltCallback>
}
 800342c:	e002      	b.n	8003434 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fb06 	bl	8002a40 <I2C_Flush_DR>
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b22      	cmp	r3, #34	@ 0x22
 800344e:	f040 80b9 	bne.w	80035c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d921      	bls.n	80034aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b03      	cmp	r3, #3
 8003494:	f040 8096 	bne.w	80035c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80034a8:	e08c      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d07f      	beq.n	80035b2 <I2C_MasterReceive_RXNE+0x176>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <I2C_MasterReceive_RXNE+0x82>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d179      	bne.n	80035b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 f83c 	bl	800453c <I2C_WaitOnSTOPRequestThroughIT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d14c      	bne.n	8003564 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d10a      	bne.n	800353a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fdba 	bl	80030ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003538:	e044      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d002      	beq.n	800354e <I2C_MasterReceive_RXNE+0x112>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b20      	cmp	r3, #32
 800354c:	d103      	bne.n	8003556 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
 8003554:	e002      	b.n	800355c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2212      	movs	r2, #18
 800355a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fd87 	bl	8003070 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003562:	e02f      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003572:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fd88 	bl	80030c0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035b0:	e008      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c0:	605a      	str	r2, [r3, #4]
}
 80035c2:	e7ff      	b.n	80035c4 <I2C_MasterReceive_RXNE+0x188>
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d11b      	bne.n	800361c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800361a:	e0c4      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b03      	cmp	r3, #3
 8003624:	d129      	bne.n	800367a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003634:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d00a      	beq.n	8003652 <I2C_MasterReceive_BTF+0x86>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d007      	beq.n	8003652 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003650:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003678:	e095      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d17d      	bne.n	8003780 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d002      	beq.n	8003690 <I2C_MasterReceive_BTF+0xc4>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d108      	bne.n	80036a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e016      	b.n	80036d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d002      	beq.n	80036ae <I2C_MasterReceive_BTF+0xe2>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d108      	bne.n	80036c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e007      	b.n	80036d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800372a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d10a      	bne.n	8003756 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fcac 	bl	80030ac <HAL_I2C_MemRxCpltCallback>
}
 8003754:	e027      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d002      	beq.n	800376a <I2C_MasterReceive_BTF+0x19e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b20      	cmp	r3, #32
 8003768:	d103      	bne.n	8003772 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003770:	e002      	b.n	8003778 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2212      	movs	r2, #18
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff fc79 	bl	8003070 <HAL_I2C_MasterRxCpltCallback>
}
 800377e:	e012      	b.n	80037a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d117      	bne.n	80037f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037dc:	e067      	b.n	80038ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]
}
 80037f0:	e05d      	b.n	80038ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037fa:	d133      	bne.n	8003864 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b21      	cmp	r3, #33	@ 0x21
 8003806:	d109      	bne.n	800381c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e008      	b.n	800382e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <I2C_Master_SB+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <I2C_Master_SB+0x100>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02d      	beq.n	80038ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	605a      	str	r2, [r3, #4]
}
 8003862:	e024      	b.n	80038ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10e      	bne.n	800388a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	b29b      	uxth	r3, r3
 8003872:	11db      	asrs	r3, r3, #7
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0306 	and.w	r3, r3, #6
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f063 030f 	orn	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
}
 8003888:	e011      	b.n	80038ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10d      	bne.n	80038ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	b29b      	uxth	r3, r3
 8003898:	11db      	asrs	r3, r3, #7
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0306 	and.w	r3, r3, #6
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f063 030e 	orn	r3, r3, #14
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <I2C_Master_ADD10+0x26>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <I2C_Master_ADD10+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003900:	605a      	str	r2, [r3, #4]
  }
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800390e:	b480      	push	{r7}
 8003910:	b091      	sub	sp, #68	@ 0x44
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b22      	cmp	r3, #34	@ 0x22
 8003936:	f040 8169 	bne.w	8003c0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <I2C_Master_ADDR+0x54>
 8003942:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d10b      	bne.n	8003962 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	633b      	str	r3, [r7, #48]	@ 0x30
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	e160      	b.n	8003c24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11d      	bne.n	80039a6 <I2C_Master_ADDR+0x98>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003972:	d118      	bne.n	80039a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003998:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80039a4:	e13e      	b.n	8003c24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d113      	bne.n	80039d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e115      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 808a 	bne.w	8003af8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ea:	d137      	bne.n	8003a5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a0a:	d113      	bne.n	8003a34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	e0e7      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e0d3      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d02e      	beq.n	8003ac0 <I2C_Master_ADDR+0x1b2>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d02b      	beq.n	8003ac0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	2b12      	cmp	r3, #18
 8003a6c:	d102      	bne.n	8003a74 <I2C_Master_ADDR+0x166>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d125      	bne.n	8003ac0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00e      	beq.n	8003a98 <I2C_Master_ADDR+0x18a>
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d00b      	beq.n	8003a98 <I2C_Master_ADDR+0x18a>
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d008      	beq.n	8003a98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e007      	b.n	8003aa8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	e0a1      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ace:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e085      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d14d      	bne.n	8003b9e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d016      	beq.n	8003b36 <I2C_Master_ADDR+0x228>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d013      	beq.n	8003b36 <I2C_Master_ADDR+0x228>
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d010      	beq.n	8003b36 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b44:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b54:	d117      	bne.n	8003b86 <I2C_Master_ADDR+0x278>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b5c:	d00b      	beq.n	8003b76 <I2C_Master_ADDR+0x268>
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d008      	beq.n	8003b76 <I2C_Master_ADDR+0x268>
 8003b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d005      	beq.n	8003b76 <I2C_Master_ADDR+0x268>
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d002      	beq.n	8003b76 <I2C_Master_ADDR+0x268>
 8003b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d107      	bne.n	8003b86 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e032      	b.n	8003c04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bbc:	d117      	bne.n	8003bee <I2C_Master_ADDR+0x2e0>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bc4:	d00b      	beq.n	8003bde <I2C_Master_ADDR+0x2d0>
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d008      	beq.n	8003bde <I2C_Master_ADDR+0x2d0>
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d005      	beq.n	8003bde <I2C_Master_ADDR+0x2d0>
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d002      	beq.n	8003bde <I2C_Master_ADDR+0x2d0>
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d107      	bne.n	8003bee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c0a:	e00b      	b.n	8003c24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	e7ff      	b.n	8003c24 <I2C_Master_ADDR+0x316>
 8003c24:	bf00      	nop
 8003c26:	3744      	adds	r7, #68	@ 0x44
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02b      	beq.n	8003ca2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d114      	bne.n	8003ca2 <I2C_SlaveTransmit_TXE+0x72>
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b29      	cmp	r3, #41	@ 0x29
 8003c7c:	d111      	bne.n	8003ca2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2221      	movs	r2, #33	@ 0x21
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2228      	movs	r2, #40	@ 0x28
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc ff91 	bl	8000bc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02c      	beq.n	8003d60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d114      	bne.n	8003d60 <I2C_SlaveReceive_RXNE+0x74>
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d3a:	d111      	bne.n	8003d60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2222      	movs	r2, #34	@ 0x22
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2228      	movs	r2, #40	@ 0x28
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc ff27 	bl	8000bae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dc6:	2b28      	cmp	r3, #40	@ 0x28
 8003dc8:	d127      	bne.n	8003e1a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	09db      	lsrs	r3, r3, #7
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	81bb      	strh	r3, [r7, #12]
 8003dfc:	e002      	b.n	8003e04 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e0c:	89ba      	ldrh	r2, [r7, #12]
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc feb9 	bl	8000b8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e18:	e00e      	b.n	8003e38 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d172      	bne.n	8003f84 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b22      	cmp	r3, #34	@ 0x22
 8003ea2:	d002      	beq.n	8003eaa <I2C_Slave_STOPF+0x6a>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea8:	d135      	bne.n	8003f16 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003edc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f8b0 	bl	8002048 <HAL_DMA_GetState>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d049      	beq.n	8003f82 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	4a69      	ldr	r2, [pc, #420]	@ (8004098 <I2C_Slave_STOPF+0x258>)
 8003ef4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd fef8 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03d      	beq.n	8003f82 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f10:	4610      	mov	r0, r2
 8003f12:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f14:	e035      	b.n	8003f82 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f87a 	bl	8002048 <HAL_DMA_GetState>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d014      	beq.n	8003f84 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004098 <I2C_Slave_STOPF+0x258>)
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fec2 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4798      	blx	r3
 8003f80:	e000      	b.n	8003f84 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f82:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03e      	beq.n	800400c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d112      	bne.n	8003fc2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d112      	bne.n	8003ff6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8b7 	bl	8004188 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800401a:	e039      	b.n	8004090 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004020:	d109      	bne.n	8004036 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2228      	movs	r2, #40	@ 0x28
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fc fdbc 	bl	8000bae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b28      	cmp	r3, #40	@ 0x28
 8004040:	d111      	bne.n	8004066 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <I2C_Slave_STOPF+0x25c>)
 8004046:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff f810 	bl	8003084 <HAL_I2C_ListenCpltCallback>
}
 8004064:	e014      	b.n	8004090 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	2b22      	cmp	r3, #34	@ 0x22
 800406c:	d002      	beq.n	8004074 <I2C_Slave_STOPF+0x234>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b22      	cmp	r3, #34	@ 0x22
 8004072:	d10d      	bne.n	8004090 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fd8f 	bl	8000bae <HAL_I2C_SlaveRxCpltCallback>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	080043ed 	.word	0x080043ed
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d002      	beq.n	80040c2 <I2C_Slave_AF+0x22>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d129      	bne.n	8004116 <I2C_Slave_AF+0x76>
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b28      	cmp	r3, #40	@ 0x28
 80040c6:	d126      	bne.n	8004116 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004184 <I2C_Slave_AF+0xe4>)
 80040cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe ffb8 	bl	8003084 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004114:	e031      	b.n	800417a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b21      	cmp	r3, #33	@ 0x21
 800411a:	d129      	bne.n	8004170 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <I2C_Slave_AF+0xe4>)
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2221      	movs	r2, #33	@ 0x21
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004146:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004150:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004160:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe fc6c 	bl	8002a40 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fc fd2b 	bl	8000bc4 <HAL_I2C_SlaveTxCpltCallback>
}
 800416e:	e004      	b.n	800417a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004178:	615a      	str	r2, [r3, #20]
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004196:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800419e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041a0:	7bbb      	ldrb	r3, [r7, #14]
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d002      	beq.n	80041ac <I2C_ITError+0x24>
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d10a      	bne.n	80041c2 <I2C_ITError+0x3a>
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b22      	cmp	r3, #34	@ 0x22
 80041b0:	d107      	bne.n	80041c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041c8:	2b28      	cmp	r3, #40	@ 0x28
 80041ca:	d107      	bne.n	80041dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2228      	movs	r2, #40	@ 0x28
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041da:	e015      	b.n	8004208 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ea:	d00a      	beq.n	8004202 <I2C_ITError+0x7a>
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b60      	cmp	r3, #96	@ 0x60
 80041f0:	d007      	beq.n	8004202 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004216:	d162      	bne.n	80042de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004226:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d020      	beq.n	8004278 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423a:	4a6a      	ldr	r2, [pc, #424]	@ (80043e4 <I2C_ITError+0x25c>)
 800423c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd fd54 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8089 	beq.w	8004362 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004272:	4610      	mov	r0, r2
 8004274:	4798      	blx	r3
 8004276:	e074      	b.n	8004362 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	4a59      	ldr	r2, [pc, #356]	@ (80043e4 <I2C_ITError+0x25c>)
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fd33 	bl	8001cf0 <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d068      	beq.n	8004362 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d10b      	bne.n	80042b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042d8:	4610      	mov	r0, r2
 80042da:	4798      	blx	r3
 80042dc:	e041      	b.n	8004362 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b60      	cmp	r3, #96	@ 0x60
 80042e8:	d125      	bne.n	8004336 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d10b      	bne.n	800431e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fe fed0 	bl	80030d4 <HAL_I2C_AbortCpltCallback>
 8004334:	e015      	b.n	8004362 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d10b      	bne.n	800435c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7fe feaf 	bl	80030c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10e      	bne.n	8004390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d113      	bne.n	80043dc <I2C_ITError+0x254>
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b28      	cmp	r3, #40	@ 0x28
 80043b8:	d110      	bne.n	80043dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <I2C_ITError+0x260>)
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe fe54 	bl	8003084 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	080043ed 	.word	0x080043ed
 80043e8:	ffff0000 	.word	0xffff0000

080043ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004406:	4b4b      	ldr	r3, [pc, #300]	@ (8004534 <I2C_DMAAbort+0x148>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	08db      	lsrs	r3, r3, #3
 800440c:	4a4a      	ldr	r2, [pc, #296]	@ (8004538 <I2C_DMAAbort+0x14c>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0a1a      	lsrs	r2, r3, #8
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00da      	lsls	r2, r3, #3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004432:	e00a      	b.n	800444a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b01      	subs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004448:	d0ea      	beq.n	8004420 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	2200      	movs	r2, #0
 8004458:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448c:	2200      	movs	r2, #0
 800448e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	2200      	movs	r2, #0
 800449e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b60      	cmp	r3, #96	@ 0x60
 80044ba:	d10e      	bne.n	80044da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7fe fdfe 	bl	80030d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d8:	e027      	b.n	800452a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044e0:	2b28      	cmp	r3, #40	@ 0x28
 80044e2:	d117      	bne.n	8004514 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004502:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2228      	movs	r2, #40	@ 0x28
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004512:	e007      	b.n	8004524 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	f7fe fdcb 	bl	80030c0 <HAL_I2C_ErrorCallback>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000000 	.word	0x20000000
 8004538:	14f8b589 	.word	0x14f8b589

0800453c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004548:	4b13      	ldr	r3, [pc, #76]	@ (8004598 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	4a13      	ldr	r2, [pc, #76]	@ (800459c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	0a1a      	lsrs	r2, r3, #8
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b01      	subs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d107      	bne.n	800457a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e008      	b.n	800458c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004588:	d0e9      	beq.n	800455e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000000 	.word	0x20000000
 800459c:	14f8b589 	.word	0x14f8b589

080045a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80045b0:	d103      	bne.n	80045ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045b8:	e007      	b.n	80045ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045be:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045c2:	d102      	bne.n	80045ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2208      	movs	r2, #8
 80045c8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e267      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d075      	beq.n	80046e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045f6:	4b88      	ldr	r3, [pc, #544]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d00c      	beq.n	800461c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004602:	4b85      	ldr	r3, [pc, #532]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800460a:	2b08      	cmp	r3, #8
 800460c:	d112      	bne.n	8004634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460e:	4b82      	ldr	r3, [pc, #520]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800461a:	d10b      	bne.n	8004634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	4b7e      	ldr	r3, [pc, #504]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d05b      	beq.n	80046e0 <HAL_RCC_OscConfig+0x108>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d157      	bne.n	80046e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e242      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d106      	bne.n	800464c <HAL_RCC_OscConfig+0x74>
 800463e:	4b76      	ldr	r3, [pc, #472]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a75      	ldr	r2, [pc, #468]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e01d      	b.n	8004688 <HAL_RCC_OscConfig+0xb0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0x98>
 8004656:	4b70      	ldr	r3, [pc, #448]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6f      	ldr	r2, [pc, #444]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b6d      	ldr	r3, [pc, #436]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6c      	ldr	r2, [pc, #432]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0xb0>
 8004670:	4b69      	ldr	r3, [pc, #420]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a68      	ldr	r2, [pc, #416]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b66      	ldr	r3, [pc, #408]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a65      	ldr	r2, [pc, #404]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fc fcda 	bl	8001048 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fc fcd6 	bl	8001048 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e207      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0xc0>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fc fcc6 	bl	8001048 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fc fcc2 	bl	8001048 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	@ 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1f3      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	4b51      	ldr	r3, [pc, #324]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0xe8>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d063      	beq.n	80047b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fa:	4b47      	ldr	r3, [pc, #284]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004702:	2b08      	cmp	r3, #8
 8004704:	d11c      	bne.n	8004740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004706:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d116      	bne.n	8004740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x152>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e1c7      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4937      	ldr	r1, [pc, #220]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	e03a      	b.n	80047b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004748:	4b34      	ldr	r3, [pc, #208]	@ (800481c <HAL_RCC_OscConfig+0x244>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fc fc7b 	bl	8001048 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004756:	f7fc fc77 	bl	8001048 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1a8      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	4b2b      	ldr	r3, [pc, #172]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004774:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4925      	ldr	r1, [pc, #148]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
 8004788:	e015      	b.n	80047b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800478a:	4b24      	ldr	r3, [pc, #144]	@ (800481c <HAL_RCC_OscConfig+0x244>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fc fc5a 	bl	8001048 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004798:	f7fc fc56 	bl	8001048 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e187      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d036      	beq.n	8004830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ca:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <HAL_RCC_OscConfig+0x248>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fc fc3a 	bl	8001048 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fc fc36 	bl	8001048 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e167      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <HAL_RCC_OscConfig+0x240>)
 80047ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x200>
 80047f6:	e01b      	b.n	8004830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_RCC_OscConfig+0x248>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fc fc23 	bl	8001048 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	e00e      	b.n	8004824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004806:	f7fc fc1f 	bl	8001048 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d907      	bls.n	8004824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e150      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
 8004818:	40023800 	.word	0x40023800
 800481c:	42470000 	.word	0x42470000
 8004820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	4b88      	ldr	r3, [pc, #544]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ea      	bne.n	8004806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8097 	beq.w	800496c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b81      	ldr	r3, [pc, #516]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	4b7d      	ldr	r3, [pc, #500]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	4a7c      	ldr	r2, [pc, #496]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	@ 0x40
 800485e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486e:	4b77      	ldr	r3, [pc, #476]	@ (8004a4c <HAL_RCC_OscConfig+0x474>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d118      	bne.n	80048ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487a:	4b74      	ldr	r3, [pc, #464]	@ (8004a4c <HAL_RCC_OscConfig+0x474>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a73      	ldr	r2, [pc, #460]	@ (8004a4c <HAL_RCC_OscConfig+0x474>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004886:	f7fc fbdf 	bl	8001048 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fc fbdb 	bl	8001048 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e10c      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a4c <HAL_RCC_OscConfig+0x474>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x2ea>
 80048b4:	4b64      	ldr	r3, [pc, #400]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b8:	4a63      	ldr	r2, [pc, #396]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c0:	e01c      	b.n	80048fc <HAL_RCC_OscConfig+0x324>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x30c>
 80048ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	4a5b      	ldr	r2, [pc, #364]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0x324>
 80048e4:	4b58      	ldr	r3, [pc, #352]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	4a57      	ldr	r2, [pc, #348]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f0:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f4:	4a54      	ldr	r2, [pc, #336]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f023 0304 	bic.w	r3, r3, #4
 80048fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d015      	beq.n	8004930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fc fba0 	bl	8001048 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490a:	e00a      	b.n	8004922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fc fb9c 	bl	8001048 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e0cb      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	4b49      	ldr	r3, [pc, #292]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ee      	beq.n	800490c <HAL_RCC_OscConfig+0x334>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004930:	f7fc fb8a 	bl	8001048 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004936:	e00a      	b.n	800494e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fc fb86 	bl	8001048 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0b5      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ee      	bne.n	8004938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d105      	bne.n	800496c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004960:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	4a38      	ldr	r2, [pc, #224]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a1 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004976:	4b34      	ldr	r3, [pc, #208]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b08      	cmp	r3, #8
 8004980:	d05c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d141      	bne.n	8004a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b31      	ldr	r3, [pc, #196]	@ (8004a50 <HAL_RCC_OscConfig+0x478>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fc fb5a 	bl	8001048 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc fb56 	bl	8001048 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e087      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	4b27      	ldr	r3, [pc, #156]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	019b      	lsls	r3, r3, #6
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	3b01      	subs	r3, #1
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	491b      	ldr	r1, [pc, #108]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_RCC_OscConfig+0x478>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e6:	f7fc fb2f 	bl	8001048 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fc fb2b 	bl	8001048 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e05c      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a00:	4b11      	ldr	r3, [pc, #68]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x416>
 8004a0c:	e054      	b.n	8004ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0e:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <HAL_RCC_OscConfig+0x478>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fc fb18 	bl	8001048 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fc fb14 	bl	8001048 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e045      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	4b06      	ldr	r3, [pc, #24]	@ (8004a48 <HAL_RCC_OscConfig+0x470>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x444>
 8004a3a:	e03d      	b.n	8004ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e038      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40007000 	.word	0x40007000
 8004a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <HAL_RCC_OscConfig+0x4ec>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d121      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d11a      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d111      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800

08004ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0cc      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004adc:	4b68      	ldr	r3, [pc, #416]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d90c      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0b8      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d020      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a58      	ldr	r2, [pc, #352]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b34:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a52      	ldr	r2, [pc, #328]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b50      	ldr	r3, [pc, #320]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	494d      	ldr	r1, [pc, #308]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d044      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d119      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e07f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b86:	4b3f      	ldr	r3, [pc, #252]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b96:	4b3b      	ldr	r3, [pc, #236]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e067      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba6:	4b37      	ldr	r3, [pc, #220]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4934      	ldr	r1, [pc, #208]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fc fa46 	bl	8001048 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fc fa42 	bl	8001048 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e04f      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 020c 	and.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d1eb      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be8:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d20c      	bcs.n	8004c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b22      	ldr	r3, [pc, #136]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b20      	ldr	r3, [pc, #128]	@ (8004c80 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e032      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c1c:	4b19      	ldr	r3, [pc, #100]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4916      	ldr	r1, [pc, #88]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	490e      	ldr	r1, [pc, #56]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c4e:	f000 f821 	bl	8004c94 <HAL_RCC_GetSysClockFreq>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	490a      	ldr	r1, [pc, #40]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c6a:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc f9a6 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023c00 	.word	0x40023c00
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08005500 	.word	0x08005500
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	20000004 	.word	0x20000004

08004c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b094      	sub	sp, #80	@ 0x50
 8004c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cac:	4b79      	ldr	r3, [pc, #484]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	f200 80e1 	bhi.w	8004e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0x3a>
 8004cc6:	e0db      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b73      	ldr	r3, [pc, #460]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ccc:	e0db      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cce:	4b73      	ldr	r3, [pc, #460]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8004cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cd2:	e0d8      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cde:	4b6d      	ldr	r3, [pc, #436]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d063      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cea:	4b6a      	ldr	r3, [pc, #424]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d06:	4622      	mov	r2, r4
 8004d08:	462b      	mov	r3, r5
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	0159      	lsls	r1, r3, #5
 8004d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d18:	0150      	lsls	r0, r2, #5
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4621      	mov	r1, r4
 8004d20:	1a51      	subs	r1, r2, r1
 8004d22:	6139      	str	r1, [r7, #16]
 8004d24:	4629      	mov	r1, r5
 8004d26:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d38:	4659      	mov	r1, fp
 8004d3a:	018b      	lsls	r3, r1, #6
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d42:	4651      	mov	r1, sl
 8004d44:	018a      	lsls	r2, r1, #6
 8004d46:	4651      	mov	r1, sl
 8004d48:	ebb2 0801 	subs.w	r8, r2, r1
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d66:	4690      	mov	r8, r2
 8004d68:	4699      	mov	r9, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	eb18 0303 	adds.w	r3, r8, r3
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	462b      	mov	r3, r5
 8004d74:	eb49 0303 	adc.w	r3, r9, r3
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d86:	4629      	mov	r1, r5
 8004d88:	024b      	lsls	r3, r1, #9
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d90:	4621      	mov	r1, r4
 8004d92:	024a      	lsls	r2, r1, #9
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004da4:	f7fb fa10 	bl	80001c8 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4613      	mov	r3, r2
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	e058      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b38      	ldr	r3, [pc, #224]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	0159      	lsls	r1, r3, #5
 8004dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dde:	0150      	lsls	r0, r2, #5
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4641      	mov	r1, r8
 8004de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dea:	4649      	mov	r1, r9
 8004dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e04:	ebb2 040a 	subs.w	r4, r2, sl
 8004e08:	eb63 050b 	sbc.w	r5, r3, fp
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	00eb      	lsls	r3, r5, #3
 8004e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1a:	00e2      	lsls	r2, r4, #3
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	461d      	mov	r5, r3
 8004e20:	4643      	mov	r3, r8
 8004e22:	18e3      	adds	r3, r4, r3
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb45 0303 	adc.w	r3, r5, r3
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	028b      	lsls	r3, r1, #10
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e44:	4621      	mov	r1, r4
 8004e46:	028a      	lsls	r2, r1, #10
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	61fa      	str	r2, [r7, #28]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	f7fb f9b6 	bl	80001c8 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3750      	adds	r7, #80	@ 0x50
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	00f42400 	.word	0x00f42400
 8004e9c:	007a1200 	.word	0x007a1200

08004ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000000 	.word	0x20000000

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	@ (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	08005510 	.word	0x08005510

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ee4:	f7ff ffdc 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0b5b      	lsrs	r3, r3, #13
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	@ (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	08005510 	.word	0x08005510

08004f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e042      	b.n	8004fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb ff52 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	@ 0x24
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f82b 	bl	8004fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b0c0      	sub	sp, #256	@ 0x100
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	68d9      	ldr	r1, [r3, #12]
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	ea40 0301 	orr.w	r3, r0, r1
 8004fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005000:	f021 010c 	bic.w	r1, r1, #12
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800500e:	430b      	orrs	r3, r1
 8005010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	6999      	ldr	r1, [r3, #24]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	ea40 0301 	orr.w	r3, r0, r1
 800502e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b8f      	ldr	r3, [pc, #572]	@ (8005274 <UART_SetConfig+0x2cc>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d005      	beq.n	8005048 <UART_SetConfig+0xa0>
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b8d      	ldr	r3, [pc, #564]	@ (8005278 <UART_SetConfig+0x2d0>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d104      	bne.n	8005052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7ff ff4a 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 800504c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005050:	e003      	b.n	800505a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7ff ff31 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8005056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005064:	f040 810c 	bne.w	8005280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506c:	2200      	movs	r2, #0
 800506e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	1891      	adds	r1, r2, r2
 8005080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005082:	415b      	adcs	r3, r3
 8005084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800508a:	4621      	mov	r1, r4
 800508c:	eb12 0801 	adds.w	r8, r2, r1
 8005090:	4629      	mov	r1, r5
 8005092:	eb43 0901 	adc.w	r9, r3, r1
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050aa:	4690      	mov	r8, r2
 80050ac:	4699      	mov	r9, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	eb18 0303 	adds.w	r3, r8, r3
 80050b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050b8:	462b      	mov	r3, r5
 80050ba:	eb49 0303 	adc.w	r3, r9, r3
 80050be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050d6:	460b      	mov	r3, r1
 80050d8:	18db      	adds	r3, r3, r3
 80050da:	653b      	str	r3, [r7, #80]	@ 0x50
 80050dc:	4613      	mov	r3, r2
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050ec:	f7fb f86c 	bl	80001c8 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4b61      	ldr	r3, [pc, #388]	@ (800527c <UART_SetConfig+0x2d4>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	011c      	lsls	r4, r3, #4
 80050fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800510c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	1891      	adds	r1, r2, r2
 8005116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005118:	415b      	adcs	r3, r3
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005120:	4641      	mov	r1, r8
 8005122:	eb12 0a01 	adds.w	sl, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0b01 	adc.w	fp, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800513c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005140:	4692      	mov	sl, r2
 8005142:	469b      	mov	fp, r3
 8005144:	4643      	mov	r3, r8
 8005146:	eb1a 0303 	adds.w	r3, sl, r3
 800514a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800514e:	464b      	mov	r3, r9
 8005150:	eb4b 0303 	adc.w	r3, fp, r3
 8005154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800516c:	460b      	mov	r3, r1
 800516e:	18db      	adds	r3, r3, r3
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
 8005172:	4613      	mov	r3, r2
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	647b      	str	r3, [r7, #68]	@ 0x44
 800517a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800517e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005182:	f7fb f821 	bl	80001c8 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4611      	mov	r1, r2
 800518c:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <UART_SetConfig+0x2d4>)
 800518e:	fba3 2301 	umull	r2, r3, r3, r1
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2264      	movs	r2, #100	@ 0x64
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	1acb      	subs	r3, r1, r3
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051a2:	4b36      	ldr	r3, [pc, #216]	@ (800527c <UART_SetConfig+0x2d4>)
 80051a4:	fba3 2302 	umull	r2, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051b0:	441c      	add	r4, r3
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051cc:	415b      	adcs	r3, r3
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005228:	460b      	mov	r3, r1
 800522a:	18db      	adds	r3, r3, r3
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522e:	4613      	mov	r3, r2
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800523a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800523e:	f7fa ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <UART_SetConfig+0x2d4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	@ 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	3332      	adds	r3, #50	@ 0x32
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <UART_SetConfig+0x2d4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 0207 	and.w	r2, r3, #7
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4422      	add	r2, r4
 800526e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005270:	e106      	b.n	8005480 <UART_SetConfig+0x4d8>
 8005272:	bf00      	nop
 8005274:	40011000 	.word	0x40011000
 8005278:	40011400 	.word	0x40011400
 800527c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800528a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800528e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005292:	4642      	mov	r2, r8
 8005294:	464b      	mov	r3, r9
 8005296:	1891      	adds	r1, r2, r2
 8005298:	6239      	str	r1, [r7, #32]
 800529a:	415b      	adcs	r3, r3
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052a2:	4641      	mov	r1, r8
 80052a4:	1854      	adds	r4, r2, r1
 80052a6:	4649      	mov	r1, r9
 80052a8:	eb43 0501 	adc.w	r5, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	4643      	mov	r3, r8
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052c8:	464b      	mov	r3, r9
 80052ca:	eb45 0303 	adc.w	r3, r5, r3
 80052ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052ee:	4629      	mov	r1, r5
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	4621      	mov	r1, r4
 80052f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f8:	4621      	mov	r1, r4
 80052fa:	008a      	lsls	r2, r1, #2
 80052fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005300:	f7fa ff62 	bl	80001c8 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4b60      	ldr	r3, [pc, #384]	@ (800548c <UART_SetConfig+0x4e4>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011c      	lsls	r4, r3, #4
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800531c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	61b9      	str	r1, [r7, #24]
 800532c:	415b      	adcs	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005334:	4641      	mov	r1, r8
 8005336:	1851      	adds	r1, r2, r1
 8005338:	6139      	str	r1, [r7, #16]
 800533a:	4649      	mov	r1, r9
 800533c:	414b      	adcs	r3, r1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800534c:	4659      	mov	r1, fp
 800534e:	00cb      	lsls	r3, r1, #3
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005356:	4651      	mov	r1, sl
 8005358:	00ca      	lsls	r2, r1, #3
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	4603      	mov	r3, r0
 8005360:	4642      	mov	r2, r8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800537e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800538c:	4649      	mov	r1, r9
 800538e:	008b      	lsls	r3, r1, #2
 8005390:	4641      	mov	r1, r8
 8005392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005396:	4641      	mov	r1, r8
 8005398:	008a      	lsls	r2, r1, #2
 800539a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800539e:	f7fa ff13 	bl	80001c8 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	4b38      	ldr	r3, [pc, #224]	@ (800548c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2301 	umull	r2, r3, r3, r1
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	2264      	movs	r2, #100	@ 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	3332      	adds	r3, #50	@ 0x32
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <UART_SetConfig+0x4e4>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c8:	441c      	add	r4, r3
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80053d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80053d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	415b      	adcs	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e8:	4641      	mov	r1, r8
 80053ea:	1851      	adds	r1, r2, r1
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	4649      	mov	r1, r9
 80053f0:	414b      	adcs	r3, r1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005400:	4659      	mov	r1, fp
 8005402:	00cb      	lsls	r3, r1, #3
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540a:	4651      	mov	r1, sl
 800540c:	00ca      	lsls	r2, r1, #3
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	4603      	mov	r3, r0
 8005414:	4642      	mov	r2, r8
 8005416:	189b      	adds	r3, r3, r2
 8005418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800541a:	464b      	mov	r3, r9
 800541c:	460a      	mov	r2, r1
 800541e:	eb42 0303 	adc.w	r3, r2, r3
 8005422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	663b      	str	r3, [r7, #96]	@ 0x60
 800542e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800543c:	4649      	mov	r1, r9
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	4641      	mov	r1, r8
 8005442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005446:	4641      	mov	r1, r8
 8005448:	008a      	lsls	r2, r1, #2
 800544a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800544e:	f7fa febb 	bl	80001c8 <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <UART_SetConfig+0x4e4>)
 8005458:	fba3 1302 	umull	r1, r3, r3, r2
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	2164      	movs	r1, #100	@ 0x64
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	3332      	adds	r3, #50	@ 0x32
 800546a:	4a08      	ldr	r2, [pc, #32]	@ (800548c <UART_SetConfig+0x4e4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4422      	add	r2, r4
 800547e:	609a      	str	r2, [r3, #8]
}
 8005480:	bf00      	nop
 8005482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005486:	46bd      	mov	sp, r7
 8005488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <memset>:
 8005490:	4402      	add	r2, r0
 8005492:	4603      	mov	r3, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	f803 1b01 	strb.w	r1, [r3], #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <__libc_init_array+0x38>)
 80054a4:	4c0d      	ldr	r4, [pc, #52]	@ (80054dc <__libc_init_array+0x3c>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	2600      	movs	r6, #0
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	@ (80054e0 <__libc_init_array+0x40>)
 80054b2:	4c0c      	ldr	r4, [pc, #48]	@ (80054e4 <__libc_init_array+0x44>)
 80054b4:	f000 f818 	bl	80054e8 <_init>
 80054b8:	1b64      	subs	r4, r4, r5
 80054ba:	10a4      	asrs	r4, r4, #2
 80054bc:	2600      	movs	r6, #0
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	08005528 	.word	0x08005528
 80054dc:	08005528 	.word	0x08005528
 80054e0:	08005528 	.word	0x08005528
 80054e4:	0800552c 	.word	0x0800552c

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
