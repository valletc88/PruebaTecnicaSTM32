
PruebaTecnicaSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c60  08005c60  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c60  08005c60  00006c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c64  08005c64  00006c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005c68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000001d8  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5e9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002532  00000000  00000000  00016625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00018b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  000198a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d0e  00000000  00000000  0001a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bfd  00000000  00000000  0003c016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfeb9  00000000  00000000  0004cc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011cacc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000371c  00000000  00000000  0011cb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c20 	.word	0x08005c20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c20 	.word	0x08005c20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ADC_Init>:
/**
 * @brief Inicializa el ADC y lanza la conversión con DMA para NUM_ADC canales.
 *        Llamar esta función para comenzar la adquisición continua.
 */
void ADC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Inicia la conversión ADC en modo DMA, llenando el buffer adc_in con NUM_ADC muestras
    HAL_ADC_Start_DMA(&hadc1, adc_in, NUM_ADC);
 80004f8:	2202      	movs	r2, #2
 80004fa:	4903      	ldr	r1, [pc, #12]	@ (8000508 <ADC_Init+0x14>)
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <ADC_Init+0x18>)
 80004fe:	f000 ff09 	bl	8001314 <HAL_ADC_Start_DMA>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	20000038 	.word	0x20000038

08000510 <ADC_ConvCompleteCallback>:
 *        Actualiza los registros con los valores ADC convertidos a 8 bits.
 *
 * @param hadc Puntero al manejador ADC que generó el callback.
 */
void ADC_ConvCompleteCallback(ADC_HandleTypeDef* hadc)
{
 8000510:	b480      	push	{r7}
 8000512:	b089      	sub	sp, #36	@ 0x24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    // Factor de escalado del divisor resistivo (20V → 3.3V)
    const float escala = 20.0f / 3.3f;
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <ADC_ConvCompleteCallback+0xb0>)
 800051a:	61fb      	str	r3, [r7, #28]

    // Convierte lectura ADC de 12 bits (0–4095) a tensión real de entrada
    float v_adc0 = (adc_in[0] * 3.3f) / 4095.0f;
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <ADC_ConvCompleteCallback+0xb4>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	ee07 3a90 	vmov	s15, r3
 8000524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000528:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80005c8 <ADC_ConvCompleteCallback+0xb8>
 800052c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000530:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80005cc <ADC_ConvCompleteCallback+0xbc>
 8000534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000538:	edc7 7a06 	vstr	s15, [r7, #24]
    float v_in0 = v_adc0 * escala;
 800053c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000540:	edd7 7a07 	vldr	s15, [r7, #28]
 8000544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000548:	edc7 7a05 	vstr	s15, [r7, #20]

    float v_adc1 = (adc_in[1] * 3.3f) / 4095.0f;
 800054c:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <ADC_ConvCompleteCallback+0xb4>)
 800054e:	885b      	ldrh	r3, [r3, #2]
 8000550:	ee07 3a90 	vmov	s15, r3
 8000554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000558:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80005c8 <ADC_ConvCompleteCallback+0xb8>
 800055c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000560:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80005cc <ADC_ConvCompleteCallback+0xbc>
 8000564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000568:	edc7 7a04 	vstr	s15, [r7, #16]
    float v_in1 = v_adc1 * escala;
 800056c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000570:	edd7 7a07 	vldr	s15, [r7, #28]
 8000574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000578:	edc7 7a03 	vstr	s15, [r7, #12]

    // Guarda la tensión real (en V × 10) como entero de 8 bits // Ejemplo: 15.6V → 156
    registros[0] = (uint8_t)(v_in0 * 10.0f);
 800057c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000580:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800058c:	edc7 7a00 	vstr	s15, [r7]
 8000590:	783b      	ldrb	r3, [r7, #0]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <ADC_ConvCompleteCallback+0xc0>)
 8000596:	701a      	strb	r2, [r3, #0]
    registros[1] = (uint8_t)(v_in1 * 10.0f);
 8000598:	edd7 7a03 	vldr	s15, [r7, #12]
 800059c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005a8:	edc7 7a00 	vstr	s15, [r7]
 80005ac:	783b      	ldrb	r3, [r7, #0]
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <ADC_ConvCompleteCallback+0xc0>)
 80005b2:	705a      	strb	r2, [r3, #1]
}
 80005b4:	bf00      	nop
 80005b6:	3724      	adds	r7, #36	@ 0x24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	40c1f07c 	.word	0x40c1f07c
 80005c4:	20000028 	.word	0x20000028
 80005c8:	40533333 	.word	0x40533333
 80005cc:	457ff000 	.word	0x457ff000
 80005d0:	200001d4 	.word	0x200001d4

080005d4 <GPIO_ActualizarModo_PD>:
 * - Si es 0, se configura como entrada sin pull-up ni pull-down.
 *
 * Se reinicializa cada pin para aplicar la nueva configuración.
 */
void GPIO_ActualizarModo_PD(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

    for (int i = 0; i < 8; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e025      	b.n	800063a <GPIO_ActualizarModo_PD+0x66>
    {
        // Selecciona el pin PD8+i
        GPIO_InitStruct.Pin = (1 << (8 + i));
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3308      	adds	r3, #8
 80005f2:	2201      	movs	r2, #1
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]

        // Configura modo según registros[2]
        if (registros[2] & (1 << i))
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <GPIO_ActualizarModo_PD+0x78>)
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	461a      	mov	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa42 f303 	asr.w	r3, r2, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <GPIO_ActualizarModo_PD+0x48>
        {
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Salida push-pull
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e001      	b.n	8000620 <GPIO_ActualizarModo_PD+0x4c>
        }
        else
        {
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;      // Entrada
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
        }

        // Desinicializa y luego inicializa para aplicar cambios
        HAL_GPIO_DeInit(GPIOD, GPIO_InitStruct.Pin);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <GPIO_ActualizarModo_PD+0x7c>)
 8000626:	f002 f88b 	bl	8002740 <HAL_GPIO_DeInit>
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4808      	ldr	r0, [pc, #32]	@ (8000650 <GPIO_ActualizarModo_PD+0x7c>)
 8000630:	f001 feea 	bl	8002408 <HAL_GPIO_Init>
    for (int i = 0; i < 8; i++)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b07      	cmp	r3, #7
 800063e:	ddd6      	ble.n	80005ee <GPIO_ActualizarModo_PD+0x1a>
    }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001d4 	.word	0x200001d4
 8000650:	40020c00 	.word	0x40020c00

08000654 <GPIO_Escribir_PD>:
 *
 * Cada bit de registros[3] indica si el pin correspondiente debe ir a nivel alto (1)
 * o bajo (0).
 */
void GPIO_Escribir_PD(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e020      	b.n	80006a2 <GPIO_Escribir_PD+0x4e>
    {
        // Solo actúa si el pin está configurado como salida
        if (registros[2] & (1 << i))
 8000660:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <GPIO_Escribir_PD+0x60>)
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	fa42 f303 	asr.w	r3, r2, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d013      	beq.n	800069c <GPIO_Escribir_PD+0x48>
        {
            HAL_GPIO_WritePin(GPIOD, (1 << (8 + i)),
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3308      	adds	r3, #8
 8000678:	2201      	movs	r2, #1
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	b299      	uxth	r1, r3
                (registros[3] & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <GPIO_Escribir_PD+0x60>)
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	fa42 f303 	asr.w	r3, r2, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
            HAL_GPIO_WritePin(GPIOD, (1 << (8 + i)),
 8000694:	461a      	mov	r2, r3
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <GPIO_Escribir_PD+0x64>)
 8000698:	f002 f966 	bl	8002968 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	dddb      	ble.n	8000660 <GPIO_Escribir_PD+0xc>
        }
    }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001d4 	.word	0x200001d4
 80006b8:	40020c00 	.word	0x40020c00

080006bc <GPIO_Leer_PD>:
 * El estado de cada pin se almacena en el bit correspondiente de registros[4].
 * - Bit en 1 si el pin está a nivel alto.
 * - Bit en 0 si el pin está a nivel bajo.
 */
void GPIO_Leer_PD(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
    registros[4] = 0;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <GPIO_Leer_PD+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	711a      	strb	r2, [r3, #4]

    for (int i = 0; i < 8; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	e01e      	b.n	800070c <GPIO_Leer_PD+0x50>
    {
        GPIO_PinState state = HAL_GPIO_ReadPin(GPIOD, (1 << (8 + i)));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3308      	adds	r3, #8
 80006d2:	2201      	movs	r2, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	4810      	ldr	r0, [pc, #64]	@ (8000720 <GPIO_Leer_PD+0x64>)
 80006de:	f002 f92b 	bl	8002938 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	70fb      	strb	r3, [r7, #3]
        if (state == GPIO_PIN_SET)
 80006e6:	78fb      	ldrb	r3, [r7, #3]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10c      	bne.n	8000706 <GPIO_Leer_PD+0x4a>
        {
            registros[4] |= (1 << i);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <GPIO_Leer_PD+0x60>)
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	b25a      	sxtb	r2, r3
 80006f2:	2101      	movs	r1, #1
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <GPIO_Leer_PD+0x60>)
 8000704:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 8; i++)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b07      	cmp	r3, #7
 8000710:	dddd      	ble.n	80006ce <GPIO_Leer_PD+0x12>
        }
    }
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001d4 	.word	0x200001d4
 8000720:	40020c00 	.word	0x40020c00

08000724 <I2C_Slave_Init>:
/**
 * @brief Inicializa la recepción I2C en modo esclavo con interrupciones.
 * Guarda el handler para comparaciones posteriores.
 */
void I2C_Slave_Init(I2C_HandleTypeDef *hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    hi2c_ptr = hi2c;
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <I2C_Slave_Init+0x24>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
    // Iniciar recepción interrupt-driven de 2 bytes (registro + dato)
    HAL_I2C_Slave_Receive_IT(hi2c_ptr, i2c_rx_buf, 2);
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <I2C_Slave_Init+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2202      	movs	r2, #2
 8000738:	4904      	ldr	r1, [pc, #16]	@ (800074c <I2C_Slave_Init+0x28>)
 800073a:	4618      	mov	r0, r3
 800073c:	f002 faf8 	bl	8002d30 <HAL_I2C_Slave_Receive_IT>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000034 	.word	0x20000034
 800074c:	20000030 	.word	0x20000030

08000750 <I2C_Slave_AddrCallback>:
/**
 * @brief Callback al detectar dirección I2C (START + dirección).
 * Determina si el maestro va a leer o escribir y prepara la siguiente acción.
 */
void I2C_Slave_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
 800075c:	4613      	mov	r3, r2
 800075e:	803b      	strh	r3, [r7, #0]
    if (hi2c->Instance == hi2c_ptr->Instance)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <I2C_Slave_AddrCallback+0x6c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d121      	bne.n	80007b2 <I2C_Slave_AddrCallback+0x62>
    {
        // Reiniciar índice de registro al comenzar nueva transferencia
        i2c_reg_index = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <I2C_Slave_AddrCallback+0x70>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]

        // Guardar dirección: 0 = maestro escribe, 1 = maestro lee
        slave_direction = (TransferDirection == I2C_DIRECTION_TRANSMIT) ? 0 : 1;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b01      	cmp	r3, #1
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <I2C_Slave_AddrCallback+0x74>)
 8000784:	701a      	strb	r2, [r3, #0]

        if (slave_direction == 0) {
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <I2C_Slave_AddrCallback+0x74>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <I2C_Slave_AddrCallback+0x4a>
            // Maestro va a escribir: preparamos recepción de registro + dato
            HAL_I2C_Slave_Receive_IT(hi2c, i2c_rx_buf, 2);
 800078e:	2202      	movs	r2, #2
 8000790:	490d      	ldr	r1, [pc, #52]	@ (80007c8 <I2C_Slave_AddrCallback+0x78>)
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f002 facc 	bl	8002d30 <HAL_I2C_Slave_Receive_IT>
            // Maestro va a leer: enviamos primer byte (registro actual)
            i2c_tx_data = registros[i2c_reg_index];
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
        }
    }
}
 8000798:	e00b      	b.n	80007b2 <I2C_Slave_AddrCallback+0x62>
            i2c_tx_data = registros[i2c_reg_index];
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <I2C_Slave_AddrCallback+0x70>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <I2C_Slave_AddrCallback+0x7c>)
 80007a2:	5c9a      	ldrb	r2, [r3, r2]
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <I2C_Slave_AddrCallback+0x80>)
 80007a6:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4909      	ldr	r1, [pc, #36]	@ (80007d0 <I2C_Slave_AddrCallback+0x80>)
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f002 fa4f 	bl	8002c50 <HAL_I2C_Slave_Transmit_IT>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000034 	.word	0x20000034
 80007c0:	2000002c 	.word	0x2000002c
 80007c4:	2000002d 	.word	0x2000002d
 80007c8:	20000030 	.word	0x20000030
 80007cc:	200001d4 	.word	0x200001d4
 80007d0:	20000032 	.word	0x20000032

080007d4 <I2C_Slave_RxCpltCallback>:
/**
 * @brief Callback al completar la recepción de 2 bytes (registro + dato).
 * Actualiza el registro correspondiente y vuelve a preparar recepción.
 */
void I2C_Slave_RxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c_ptr->Instance)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <I2C_Slave_RxCpltCallback+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d10f      	bne.n	800080a <I2C_Slave_RxCpltCallback+0x36>
    {
        // El primer byte es el índice de registro
        i2c_reg_index = i2c_rx_buf[0];
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <I2C_Slave_RxCpltCallback+0x44>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <I2C_Slave_RxCpltCallback+0x48>)
 80007f0:	701a      	strb	r2, [r3, #0]

        // El segundo byte es el dato que escribimos en ese registro
        registros[i2c_reg_index] = i2c_rx_buf[1];
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <I2C_Slave_RxCpltCallback+0x48>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <I2C_Slave_RxCpltCallback+0x44>)
 80007fa:	7859      	ldrb	r1, [r3, #1]
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <I2C_Slave_RxCpltCallback+0x4c>)
 80007fe:	5499      	strb	r1, [r3, r2]

        // Re-armar la recepción para seguir escuchando datos
        HAL_I2C_Slave_Receive_IT(hi2c, i2c_rx_buf, 2);
 8000800:	2202      	movs	r2, #2
 8000802:	4905      	ldr	r1, [pc, #20]	@ (8000818 <I2C_Slave_RxCpltCallback+0x44>)
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f002 fa93 	bl	8002d30 <HAL_I2C_Slave_Receive_IT>
    }
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000034 	.word	0x20000034
 8000818:	20000030 	.word	0x20000030
 800081c:	2000002c 	.word	0x2000002c
 8000820:	200001d4 	.word	0x200001d4

08000824 <I2C_Slave_TxCpltCallback>:
/**
 * @brief Callback al completar la transmisión de un byte.
 * Prepara el siguiente byte a transmitir (mismo registro).
 */
void I2C_Slave_TxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c_ptr->Instance)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <I2C_Slave_TxCpltCallback+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d10f      	bne.n	800085a <I2C_Slave_TxCpltCallback+0x36>
    {
        // Verificar que el índice no exceda el número de registros
        if (i2c_reg_index < NUM_REGISTROS)
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <I2C_Slave_TxCpltCallback+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b09      	cmp	r3, #9
 8000840:	d80b      	bhi.n	800085a <I2C_Slave_TxCpltCallback+0x36>
        {
            // Enviar nuevamente el dato actual del registro
            i2c_tx_data = registros[i2c_reg_index];
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <I2C_Slave_TxCpltCallback+0x44>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <I2C_Slave_TxCpltCallback+0x48>)
 800084a:	5c9a      	ldrb	r2, [r3, r2]
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <I2C_Slave_TxCpltCallback+0x4c>)
 800084e:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Slave_Transmit_IT(hi2c, &i2c_tx_data, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	4907      	ldr	r1, [pc, #28]	@ (8000870 <I2C_Slave_TxCpltCallback+0x4c>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f002 f9fb 	bl	8002c50 <HAL_I2C_Slave_Transmit_IT>
        }
    }
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000034 	.word	0x20000034
 8000868:	2000002c 	.word	0x2000002c
 800086c:	200001d4 	.word	0x200001d4
 8000870:	20000032 	.word	0x20000032

08000874 <ISO_ActualizarSalidas>:
 *
 * Se realiza una XOR bit a bit para aplicar la inversión cuando sea necesario.
 * Luego se transmite el byte resultante por SPI al ISO1H816G.
 */
void ISO_ActualizarSalidas(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    uint8_t salida = registros[3];     // Niveles deseados en las salidas
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <ISO_ActualizarSalidas+0x48>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	71fb      	strb	r3, [r7, #7]
    uint8_t polaridad = registros[6];  // Configuración de polaridad
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <ISO_ActualizarSalidas+0x48>)
 8000882:	799b      	ldrb	r3, [r3, #6]
 8000884:	71bb      	strb	r3, [r7, #6]

    uint8_t datos_a_enviar = salida ^ polaridad; // Aplicación de polaridad
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	4053      	eors	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	717b      	strb	r3, [r7, #5]

    // Activar CS (bajar PA4)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2110      	movs	r1, #16
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <ISO_ActualizarSalidas+0x4c>)
 8000896:	f002 f867 	bl	8002968 <HAL_GPIO_WritePin>

    // Enviar byte por SPI
    HAL_SPI_Transmit(&hspi1, &datos_a_enviar, 1, HAL_MAX_DELAY);
 800089a:	1d79      	adds	r1, r7, #5
 800089c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008a0:	2201      	movs	r2, #1
 80008a2:	4808      	ldr	r0, [pc, #32]	@ (80008c4 <ISO_ActualizarSalidas+0x50>)
 80008a4:	f004 fcab 	bl	80051fe <HAL_SPI_Transmit>

    // Desactivar CS (subir PA4)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <ISO_ActualizarSalidas+0x4c>)
 80008ae:	f002 f85b 	bl	8002968 <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200001d4 	.word	0x200001d4
 80008c0:	40020000 	.word	0x40020000
 80008c4:	2000017c 	.word	0x2000017c

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f000 fc47 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f82d 	bl	8000930 <SystemClock_Config>
  /* Initialize all configured peripherals */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f000 f997 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 80008da:	f000 f975 	bl	8000bc8 <MX_DMA_Init>
  MX_ADC1_Init();
 80008de:	f000 f883 	bl	80009e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008e2:	f000 f8e3 	bl	8000aac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008e6:	f000 f945 	bl	8000b74 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008ea:	f000 f90d 	bl	8000b08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ADC_Init();              // Inicia ADC con DMA para lectura continua
 80008ee:	f7ff fe01 	bl	80004f4 <ADC_Init>
  I2C_Slave_Init(&hi2c1);  // Inicia I2C en modo esclavo con interrupciones
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <main+0x60>)
 80008f4:	f7ff ff16 	bl	8000724 <I2C_Slave_Init>
  uint8_t modo_anterior = registros[2];
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <main+0x64>)
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      // Lee el estado actual de los pines PD8 a PD15
      GPIO_Leer_PD();
 80008fe:	f7ff fedd 	bl	80006bc <GPIO_Leer_PD>

      // Si el modo configurado de los pines (guardado en registros[2]) ha cambiado,
      // actualiza la configuración (entrada/salida) de cada pin.
      if (modo_anterior != registros[2])
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <main+0x64>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	429a      	cmp	r2, r3
 800090a:	d004      	beq.n	8000916 <main+0x4e>
      {
          GPIO_ActualizarModo_PD();
 800090c:	f7ff fe62 	bl	80005d4 <GPIO_ActualizarModo_PD>
          modo_anterior = registros[2];  // Guarda el modo actual para próximas comparaciones
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <main+0x64>)
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	71fb      	strb	r3, [r7, #7]
      }

      // Escribe el valor almacenado en registros[3] en los pines configurados como salida
      GPIO_Escribir_PD();
 8000916:	f7ff fe9d 	bl	8000654 <GPIO_Escribir_PD>
      // Actualiza las salidas del ISO1H816G por SPI según registros[3] y polaridad en registros[6]
      ISO_ActualizarSalidas();
 800091a:	f7ff ffab 	bl	8000874 <ISO_ActualizarSalidas>
      // Retardo para evitar que el loop corra demasiado rápido y saturar el bus o procesador
      HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	@ 0x64
 8000920:	f000 fc90 	bl	8001244 <HAL_Delay>
      GPIO_Leer_PD();
 8000924:	e7eb      	b.n	80008fe <main+0x36>
 8000926:	bf00      	nop
 8000928:	200000e0 	.word	0x200000e0
 800092c:	200001d4 	.word	0x200001d4

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 f942 	bl	8005bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <SystemClock_Config+0xb0>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <SystemClock_Config+0xb0>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <SystemClock_Config+0xb0>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <SystemClock_Config+0xb4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1a      	ldr	r2, [pc, #104]	@ (80009e4 <SystemClock_Config+0xb4>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <SystemClock_Config+0xb4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 ff0c 	bl	80047bc <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009aa:	f000 f9c0 	bl	8000d2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 f96f 	bl	8004cac <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009d4:	f000 f9ab 	bl	8000d2e <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3750      	adds	r7, #80	@ 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fa:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 80009fc:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <MX_ADC1_Init+0xbc>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a28:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa8 <MX_ADC1_Init+0xc0>)
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a46:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a48:	f000 fc20 	bl	800128c <HAL_ADC_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 f96c 	bl	8000d2e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a68:	f000 fd7c 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a72:	f000 f95c 	bl	8000d2e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_ADC1_Init+0xb8>)
 8000a88:	f000 fd6c 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a92:	f000 f94c 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000038 	.word	0x20000038
 8000aa4:	40012000 	.word	0x40012000
 8000aa8:	0f000001 	.word	0x0f000001

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <MX_I2C1_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000; // 100 kHz estándar
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x50 << 1; // Dirección esclavo 0x50
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ac4:	22a0      	movs	r2, #160	@ 0xa0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_I2C1_Init+0x50>)
 8000aea:	f001 ff57 	bl	800299c <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 f91b 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000e0 	.word	0x200000e0
 8000b00:	40005400 	.word	0x40005400
 8000b04:	000186a0 	.word	0x000186a0

08000b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <MX_SPI1_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_SPI1_Init+0x64>)
 8000b5a:	f004 fac7 	bl	80050ec <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b64:	f000 f8e3 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000017c 	.word	0x2000017c
 8000b70:	40013000 	.word	0x40013000

08000b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_USART1_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000bac:	f004 fd48 	bl	8005640 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f8ba 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000134 	.word	0x20000134
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_DMA_Init+0x3c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <MX_DMA_Init+0x3c>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_DMA_Init+0x3c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2038      	movs	r0, #56	@ 0x38
 8000bf0:	f001 f833 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bf4:	2038      	movs	r0, #56	@ 0x38
 8000bf6:	f001 f84c 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a1e      	ldr	r2, [pc, #120]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_GPIO_Init+0xb4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2110      	movs	r1, #16
 8000c76:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <MX_GPIO_Init+0xb8>)
 8000c78:	f001 fe76 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <MX_GPIO_Init+0xb8>)
 8000c94:	f001 fbb8 	bl	8002408 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
	  /* Configura GPIO pins : PD8 PD9 PD10 PD11
	                           PD12 PD13 PD14 PD15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c98:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000c9c:	60fb      	str	r3, [r7, #12]
	                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_GPIO_Init+0xbc>)
 8000cae:	f001 fbab 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020c00 	.word	0x40020c00

08000cc8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* Callbacks que redirigen a funciones específicas de ADC e I2C */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    ADC_ConvCompleteCallback(hadc);  // Manejo lectura ADC completa
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fc1d 	bl	8000510 <ADC_ConvCompleteCallback>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
 8000cea:	4613      	mov	r3, r2
 8000cec:	803b      	strh	r3, [r7, #0]
    I2C_Slave_AddrCallback(hi2c, TransferDirection, AddrMatchCode);  // Dirección I2C detectada
 8000cee:	883a      	ldrh	r2, [r7, #0]
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fd2b 	bl	8000750 <I2C_Slave_AddrCallback>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
    I2C_Slave_RxCpltCallback(hi2c);  // Recepción I2C completa
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fd62 	bl	80007d4 <I2C_Slave_RxCpltCallback>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    I2C_Slave_TxCpltCallback(hi2c);  // Transmisión I2C completa
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fd7f 	bl	8000824 <I2C_Slave_TxCpltCallback>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
}
 8000d34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d36:	bf00      	nop
 8000d38:	e7fd      	b.n	8000d36 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e68 <HAL_ADC_MspInit+0xdc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d157      	bne.n	8000e5e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <HAL_ADC_MspInit+0xe0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000de6:	2303      	movs	r3, #3
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <HAL_ADC_MspInit+0xe4>)
 8000dfa:	f001 fb05 	bl	8002408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e00:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <HAL_ADC_MspInit+0xec>)
 8000e02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e44:	f000 ff40 	bl	8001cc8 <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e4e:	f7ff ff6e 	bl	8000d2e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e56:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_ADC_MspInit+0xe8>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	20000080 	.word	0x20000080
 8000e78:	40026410 	.word	0x40026410

08000e7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <HAL_I2C_MspInit+0xa4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d13b      	bne.n	8000f16 <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23c0      	movs	r3, #192	@ 0xc0
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <HAL_I2C_MspInit+0xac>)
 8000ed6:	f001 fa97 	bl	8002408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_I2C_MspInit+0xa8>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201f      	movs	r0, #31
 8000efc:	f000 fead 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f00:	201f      	movs	r0, #31
 8000f02:	f000 fec6 	bl	8001c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2020      	movs	r0, #32
 8000f0c:	f000 fea5 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f10:	2020      	movs	r0, #32
 8000f12:	f000 febe 	bl	8001c92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	@ 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400

08000f2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d12b      	bne.n	8000fa6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a10      	ldr	r2, [pc, #64]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_SPI_MspInit+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f86:	23e0      	movs	r3, #224	@ 0xe0
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f96:	2305      	movs	r3, #5
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_SPI_MspInit+0x8c>)
 8000fa2:	f001 fa31 	bl	8002408 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	@ 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_UART_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12c      	bne.n	8001038 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_UART_MspInit+0x88>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_UART_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001016:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001028:	2307      	movs	r3, #7
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_UART_MspInit+0x8c>)
 8001034:	f001 f9e8 	bl	8002408 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40011000 	.word	0x40011000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f8af 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <I2C1_EV_IRQHandler+0x10>)
 80010b2:	f001 fead 	bl	8002e10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000e0 	.word	0x200000e0

080010c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <I2C1_ER_IRQHandler+0x10>)
 80010c6:	f002 f814 	bl	80030f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e0 	.word	0x200000e0

080010d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <DMA2_Stream0_IRQHandler+0x10>)
 80010da:	f000 ff1d 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000080 	.word	0x20000080

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001110:	f7ff ffea 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f004 fd4d 	bl	8005bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fbc3 	bl	80008c8 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	08005c68 	.word	0x08005c68
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	200001e4 	.word	0x200001e4

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 fd5b 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fdd2 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd73 	bl	8001cae <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e0:	f000 fd3b 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	200001e0 	.word	0x200001e0

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200001e0 	.word	0x200001e0

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e033      	b.n	800130a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fd6e 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d118      	bne.n	80012fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012d2:	f023 0302 	bic.w	r3, r3, #2
 80012d6:	f043 0202 	orr.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fa62 	bl	80017a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fa:	e001      	b.n	8001300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Start_DMA+0x22>
 8001332:	2302      	movs	r3, #2
 8001334:	e0eb      	b.n	800150e <HAL_ADC_Start_DMA+0x1fa>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d018      	beq.n	800137e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800135c:	4b6e      	ldr	r3, [pc, #440]	@ (8001518 <HAL_ADC_Start_DMA+0x204>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6e      	ldr	r2, [pc, #440]	@ (800151c <HAL_ADC_Start_DMA+0x208>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9a      	lsrs	r2, r3, #18
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001370:	e002      	b.n	8001378 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3b01      	subs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800138c:	d107      	bne.n	800139e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800139c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 80a3 	bne.w	80014f4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013ec:	d106      	bne.n	80013fc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f023 0206 	bic.w	r2, r3, #6
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80013fa:	e002      	b.n	8001402 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140a:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <HAL_ADC_Start_DMA+0x20c>)
 800140c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001412:	4a44      	ldr	r2, [pc, #272]	@ (8001524 <HAL_ADC_Start_DMA+0x210>)
 8001414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141a:	4a43      	ldr	r2, [pc, #268]	@ (8001528 <HAL_ADC_Start_DMA+0x214>)
 800141c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001422:	4a42      	ldr	r2, [pc, #264]	@ (800152c <HAL_ADC_Start_DMA+0x218>)
 8001424:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800142e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800143e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800144e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	334c      	adds	r3, #76	@ 0x4c
 800145a:	4619      	mov	r1, r3
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f000 fce0 	bl	8001e24 <HAL_DMA_Start_IT>
 8001464:	4603      	mov	r3, r0
 8001466:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2b00      	cmp	r3, #0
 8001472:	d12a      	bne.n	80014ca <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <HAL_ADC_Start_DMA+0x21c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d015      	beq.n	80014aa <HAL_ADC_Start_DMA+0x196>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <HAL_ADC_Start_DMA+0x220>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d105      	bne.n	8001494 <HAL_ADC_Start_DMA+0x180>
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_ADC_Start_DMA+0x20c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00a      	beq.n	80014aa <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a27      	ldr	r2, [pc, #156]	@ (8001538 <HAL_ADC_Start_DMA+0x224>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d136      	bne.n	800150c <HAL_ADC_Start_DMA+0x1f8>
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <HAL_ADC_Start_DMA+0x20c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d130      	bne.n	800150c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d129      	bne.n	800150c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e020      	b.n	800150c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_ADC_Start_DMA+0x21c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d11b      	bne.n	800150c <HAL_ADC_Start_DMA+0x1f8>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d114      	bne.n	800150c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	e00b      	b.n	800150c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f043 0210 	orr.w	r2, r3, #16
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800150c:	7ffb      	ldrb	r3, [r7, #31]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	40012300 	.word	0x40012300
 8001524:	080019a1 	.word	0x080019a1
 8001528:	08001a5b 	.word	0x08001a5b
 800152c:	08001a77 	.word	0x08001a77
 8001530:	40012000 	.word	0x40012000
 8001534:	40012100 	.word	0x40012100
 8001538:	40012200 	.word	0x40012200

0800153c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1c>
 800157c:	2302      	movs	r3, #2
 800157e:	e105      	b.n	800178c <HAL_ADC_ConfigChannel+0x228>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b09      	cmp	r3, #9
 800158e:	d925      	bls.n	80015dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d9      	ldr	r1, [r3, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	3b1e      	subs	r3, #30
 80015a6:	2207      	movs	r2, #7
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43da      	mvns	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	400a      	ands	r2, r1
 80015b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4403      	add	r3, r0
 80015ce:	3b1e      	subs	r3, #30
 80015d0:	409a      	lsls	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	e022      	b.n	8001622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6919      	ldr	r1, [r3, #16]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	2207      	movs	r2, #7
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4403      	add	r3, r0
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d824      	bhi.n	8001674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3b05      	subs	r3, #5
 800163c:	221f      	movs	r2, #31
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	400a      	ands	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b05      	subs	r3, #5
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
 8001672:	e04c      	b.n	800170e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b0c      	cmp	r3, #12
 800167a:	d824      	bhi.n	80016c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b23      	subs	r3, #35	@ 0x23
 800168e:	221f      	movs	r2, #31
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	3b23      	subs	r3, #35	@ 0x23
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016c4:	e023      	b.n	800170e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b41      	subs	r3, #65	@ 0x41
 80016d8:	221f      	movs	r2, #31
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	@ 0x41
 8001702:	fa00 f203 	lsl.w	r2, r0, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_ADC_ConfigChannel+0x234>)
 8001710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_ADC_ConfigChannel+0x238>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d109      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d105      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_ADC_ConfigChannel+0x238>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d123      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b10      	cmp	r3, #16
 8001740:	d003      	beq.n	800174a <HAL_ADC_ConfigChannel+0x1e6>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b11      	cmp	r3, #17
 8001748:	d11b      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d111      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_ADC_ConfigChannel+0x240>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40012300 	.word	0x40012300
 800179c:	40012000 	.word	0x40012000
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b79      	ldr	r3, [pc, #484]	@ (8001998 <ADC_Init+0x1f0>)
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	021a      	lsls	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	4a58      	ldr	r2, [pc, #352]	@ (800199c <ADC_Init+0x1f4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800184e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00f      	b.n	80018a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0202 	bic.w	r2, r2, #2
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e1b      	ldrb	r3, [r3, #24]
 80018c0:	005a      	lsls	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	035a      	lsls	r2, r3, #13
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e007      	b.n	800191c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3b01      	subs	r3, #1
 8001938:	051a      	lsls	r2, r3, #20
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800195e:	025a      	lsls	r2, r3, #9
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	029a      	lsls	r2, r3, #10
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40012300 	.word	0x40012300
 800199c:	0f000001 	.word	0x0f000001

080019a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d13c      	bne.n	8001a34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d12b      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d127      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d119      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0220 	bic.w	r2, r2, #32
 8001a06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff f94b 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a32:	e00e      	b.n	8001a52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fd85 	bl	8001550 <HAL_ADC_ErrorCallback>
}
 8001a46:	e004      	b.n	8001a52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fd67 	bl	800153c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a82:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f043 0204 	orr.w	r2, r3, #4
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fd5a 	bl	8001550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	@ (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff faaa 	bl	800122c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e099      	b.n	8001e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	e00f      	b.n	8001d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d06:	f7ff fa91 	bl	800122c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d908      	bls.n	8001d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e078      	b.n	8001e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e8      	bne.n	8001d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <HAL_DMA_Init+0x158>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fa9f 	bl	8002310 <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001de6:	2301      	movs	r3, #1
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa56 	bl	80022a4 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	223f      	movs	r2, #63	@ 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	f010803f 	.word	0xf010803f

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Start_IT+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e040      	b.n	8001ecc <HAL_DMA_Start_IT+0xa8>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12f      	bne.n	8001ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f9e8 	bl	8002248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	223f      	movs	r2, #63	@ 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0216 	orr.w	r2, r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	@ 0x80
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00c      	b.n	8001f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f24:	4b8e      	ldr	r3, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x248>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8e      	ldr	r2, [pc, #568]	@ (8002164 <HAL_DMA_IRQHandler+0x24c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2208      	movs	r2, #8
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	2208      	movs	r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d043      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03c      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2210      	movs	r2, #16
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d018      	beq.n	800205a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d024      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e01f      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e016      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	2220      	movs	r2, #32
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808f 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8087 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2220      	movs	r2, #32
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d136      	bne.n	8002130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x1da>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	223f      	movs	r2, #63	@ 0x3f
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
        }
        return;
 800212e:	e079      	b.n	8002224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01d      	beq.n	800217a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	2b00      	cmp	r3, #0
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e02c      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e01e      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10f      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d032      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d307      	bcc.n	8002200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x2cc>
 80021fe:	e000      	b.n	8002202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002224:	bf00      	nop
    }
  }
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800223a:	b2db      	uxtb	r3, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b40      	cmp	r3, #64	@ 0x40
 8002274:	d108      	bne.n	8002288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002286:	e007      	b.n	8002298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b10      	subs	r3, #16
 80022b4:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <DMA_CalcBaseAndBitshift+0x64>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022be:	4a13      	ldr	r2, [pc, #76]	@ (800230c <DMA_CalcBaseAndBitshift+0x68>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d909      	bls.n	80022e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022e4:	e007      	b.n	80022f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	aaaaaaab 	.word	0xaaaaaaab
 800230c:	08005c50 	.word	0x08005c50

08002310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11f      	bne.n	800236a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d856      	bhi.n	80023de <DMA_CheckFifoParam+0xce>
 8002330:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <DMA_CheckFifoParam+0x28>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	08002349 	.word	0x08002349
 800233c:	0800235b 	.word	0x0800235b
 8002340:	08002349 	.word	0x08002349
 8002344:	080023df 	.word	0x080023df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d046      	beq.n	80023e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e043      	b.n	80023e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002362:	d140      	bne.n	80023e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e03d      	b.n	80023e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002372:	d121      	bne.n	80023b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d837      	bhi.n	80023ea <DMA_CheckFifoParam+0xda>
 800237a:	a201      	add	r2, pc, #4	@ (adr r2, 8002380 <DMA_CheckFifoParam+0x70>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	08002391 	.word	0x08002391
 8002384:	08002397 	.word	0x08002397
 8002388:	08002391 	.word	0x08002391
 800238c:	080023a9 	.word	0x080023a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e030      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d025      	beq.n	80023ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a6:	e022      	b.n	80023ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b6:	e01c      	b.n	80023f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d903      	bls.n	80023c6 <DMA_CheckFifoParam+0xb6>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d003      	beq.n	80023cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c4:	e018      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ca:	e015      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e00b      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023de:	bf00      	nop
 80023e0:	e00a      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e008      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e006      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e004      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e002      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
    }
  } 
  
  return status; 
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e16b      	b.n	80026fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 815a 	bne.w	80026f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80b4 	beq.w	80026f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b60      	ldr	r3, [pc, #384]	@ (8002714 <HAL_GPIO_Init+0x30c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a5f      	ldr	r2, [pc, #380]	@ (8002714 <HAL_GPIO_Init+0x30c>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_GPIO_Init+0x30c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002718 <HAL_GPIO_Init+0x310>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a52      	ldr	r2, [pc, #328]	@ (800271c <HAL_GPIO_Init+0x314>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02b      	beq.n	800262e <HAL_GPIO_Init+0x226>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a51      	ldr	r2, [pc, #324]	@ (8002720 <HAL_GPIO_Init+0x318>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x222>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_GPIO_Init+0x31c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x21e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <HAL_GPIO_Init+0x320>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x21a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4e      	ldr	r2, [pc, #312]	@ (800272c <HAL_GPIO_Init+0x324>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x216>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002730 <HAL_GPIO_Init+0x328>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x212>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4c      	ldr	r2, [pc, #304]	@ (8002734 <HAL_GPIO_Init+0x32c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <HAL_GPIO_Init+0x330>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x20a>
 800260e:	2307      	movs	r3, #7
 8002610:	e00e      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002612:	2308      	movs	r3, #8
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002616:	2306      	movs	r3, #6
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x228>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x228>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	@ (8002718 <HAL_GPIO_Init+0x310>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_GPIO_Init+0x334>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a32      	ldr	r2, [pc, #200]	@ (800273c <HAL_GPIO_Init+0x334>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_GPIO_Init+0x334>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a27      	ldr	r2, [pc, #156]	@ (800273c <HAL_GPIO_Init+0x334>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_GPIO_Init+0x334>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c6:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_GPIO_Init+0x334>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f0:	4a12      	ldr	r2, [pc, #72]	@ (800273c <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae90 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	@ 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40021c00 	.word	0x40021c00
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e0cd      	b.n	80028f8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	f040 80bd 	bne.w	80028f2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002778:	4a65      	ldr	r2, [pc, #404]	@ (8002910 <HAL_GPIO_DeInit+0x1d0>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a5d      	ldr	r2, [pc, #372]	@ (8002914 <HAL_GPIO_DeInit+0x1d4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_DeInit+0xba>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_GPIO_DeInit+0x1d8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_DeInit+0xb6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a5b      	ldr	r2, [pc, #364]	@ (800291c <HAL_GPIO_DeInit+0x1dc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_DeInit+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002920 <HAL_GPIO_DeInit+0x1e0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_DeInit+0xae>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a59      	ldr	r2, [pc, #356]	@ (8002924 <HAL_GPIO_DeInit+0x1e4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_DeInit+0xaa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <HAL_GPIO_DeInit+0x1e8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_DeInit+0xa6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a57      	ldr	r2, [pc, #348]	@ (800292c <HAL_GPIO_DeInit+0x1ec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_DeInit+0xa2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a56      	ldr	r2, [pc, #344]	@ (8002930 <HAL_GPIO_DeInit+0x1f0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_DeInit+0x9e>
 80027da:	2307      	movs	r3, #7
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027de:	2308      	movs	r3, #8
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_DeInit+0xbc>
 80027fa:	2300      	movs	r3, #0
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d132      	bne.n	8002872 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800280c:	4b49      	ldr	r3, [pc, #292]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	4947      	ldr	r1, [pc, #284]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 8002816:	4013      	ands	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800281a:	4b46      	ldr	r3, [pc, #280]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	4944      	ldr	r1, [pc, #272]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 8002824:	4013      	ands	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002828:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	4940      	ldr	r1, [pc, #256]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 8002832:	4013      	ands	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002836:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	493d      	ldr	r1, [pc, #244]	@ (8002934 <HAL_GPIO_DeInit+0x1f4>)
 8002840:	4013      	ands	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002854:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <HAL_GPIO_DeInit+0x1d0>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	43da      	mvns	r2, r3
 8002864:	482a      	ldr	r0, [pc, #168]	@ (8002910 <HAL_GPIO_DeInit+0x1d0>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	400a      	ands	r2, r1
 800286c:	3302      	adds	r3, #2
 800286e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2103      	movs	r1, #3
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	08d2      	lsrs	r2, r2, #3
 80028a8:	4019      	ands	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2103      	movs	r1, #3
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2101      	movs	r1, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2103      	movs	r1, #3
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	f67f af2e 	bls.w	800275c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e12b      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fa5a 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	@ 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a00:	f002 fb4c 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a81      	ldr	r2, [pc, #516]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <HAL_I2C_Init+0x84>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a80      	ldr	r2, [pc, #512]	@ (8002c14 <HAL_I2C_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e006      	b.n	8002a2e <HAL_I2C_Init+0x92>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a7d      	ldr	r2, [pc, #500]	@ (8002c18 <HAL_I2C_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0e7      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a78      	ldr	r2, [pc, #480]	@ (8002c1c <HAL_I2C_Init+0x280>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d802      	bhi.n	8002a70 <HAL_I2C_Init+0xd4>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	e009      	b.n	8002a84 <HAL_I2C_Init+0xe8>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a69      	ldr	r2, [pc, #420]	@ (8002c20 <HAL_I2C_Init+0x284>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	495c      	ldr	r1, [pc, #368]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d819      	bhi.n	8002ad8 <HAL_I2C_Init+0x13c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab8:	400b      	ands	r3, r1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_I2C_Init+0x138>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	e051      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e04f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_I2C_Init+0x168>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e012      	b.n	8002b2a <HAL_I2C_Init+0x18e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x196>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <HAL_I2C_Init+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e58      	subs	r0, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	0099      	lsls	r1, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6911      	ldr	r1, [r2, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	001e847f 	.word	0x001e847f
 8002c18:	003d08ff 	.word	0x003d08ff
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c36:	2b80      	cmp	r3, #128	@ 0x80
 8002c38:	d103      	bne.n	8002c42 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d158      	bne.n	8002d1c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_I2C_Slave_Transmit_IT+0x26>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e051      	b.n	8002d1e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Slave_Transmit_IT+0x38>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e04a      	b.n	8002d1e <HAL_I2C_Slave_Transmit_IT+0xce>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	@ 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002d16:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	ffff0000 	.word	0xffff0000

08002d30 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d158      	bne.n	8002dfc <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_I2C_Slave_Receive_IT+0x26>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e051      	b.n	8002dfe <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Slave_Receive_IT+0x38>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e04a      	b.n	8002dfe <HAL_I2C_Slave_Receive_IT+0xce>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d007      	beq.n	8002d8e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d9c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2222      	movs	r2, #34	@ 0x22
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8002e0c <HAL_I2C_Slave_Receive_IT+0xdc>)
 8002dce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dde:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002df6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	ffff0000 	.word	0xffff0000

08002e10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d003      	beq.n	8002e48 <HAL_I2C_EV_IRQHandler+0x38>
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b40      	cmp	r3, #64	@ 0x40
 8002e44:	f040 80c1 	bne.w	8002fca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_I2C_EV_IRQHandler+0x6e>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002e68:	d003      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x62>
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_EV_IRQHandler+0x66>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_I2C_EV_IRQHandler+0x68>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f000 8132 	beq.w	80030e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00c      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x92>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	0a5b      	lsrs	r3, r3, #9
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f001 fc75 	bl	8004784 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fd79 	bl	8003992 <I2C_Master_SB>
 8002ea0:	e092      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fdef 	bl	8003a9e <I2C_Master_ADD10>
 8002ec0:	e082      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	0a5b      	lsrs	r3, r3, #9
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fe09 	bl	8003af2 <I2C_Master_ADDR>
 8002ee0:	e072      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03b      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efc:	f000 80f3 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	09db      	lsrs	r3, r3, #7
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	0a9b      	lsrs	r3, r3, #10
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f9d1 	bl	80032cc <I2C_MasterTransmit_TXE>
 8002f2a:	e04d      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80d6 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	0a5b      	lsrs	r3, r3, #9
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80cf 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f48:	7bbb      	ldrb	r3, [r7, #14]
 8002f4a:	2b21      	cmp	r3, #33	@ 0x21
 8002f4c:	d103      	bne.n	8002f56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa58 	bl	8003404 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f54:	e0c7      	b.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	f040 80c4 	bne.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fac6 	bl	80034f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f64:	e0bf      	b.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f74:	f000 80b7 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00f      	beq.n	8002fa4 <HAL_I2C_EV_IRQHandler+0x194>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0a9b      	lsrs	r3, r3, #10
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <HAL_I2C_EV_IRQHandler+0x194>
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb3f 	bl	8003620 <I2C_MasterReceive_RXNE>
 8002fa2:	e011      	b.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 809a 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	0a5b      	lsrs	r3, r3, #9
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8093 	beq.w	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fbf5 	bl	80037b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc6:	e08e      	b.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fc8:	e08d      	b.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e007      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x20e>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	0a5b      	lsrs	r3, r3, #9
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 ffba 	bl	8003f90 <I2C_Slave_ADDR>
 800301c:	e066      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_I2C_EV_IRQHandler+0x22e>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	0a5b      	lsrs	r3, r3, #9
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fff4 	bl	8004024 <I2C_Slave_STOPF>
 800303c:	e056      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800303e:	7bbb      	ldrb	r3, [r7, #14]
 8003040:	2b21      	cmp	r3, #33	@ 0x21
 8003042:	d002      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0x23a>
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	2b29      	cmp	r3, #41	@ 0x29
 8003048:	d125      	bne.n	8003096 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	09db      	lsrs	r3, r3, #7
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00f      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0x266>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a9b      	lsrs	r3, r3, #10
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0x266>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fed0 	bl	8003e14 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003074:	e039      	b.n	80030ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d033      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x2da>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	0a5b      	lsrs	r3, r3, #9
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02d      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fefd 	bl	8003e8e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003094:	e029      	b.n	80030ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00f      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	0a9b      	lsrs	r3, r3, #10
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 ff08 	bl	8003ed0 <I2C_SlaveReceive_RXNE>
 80030c0:	e014      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 ff36 	bl	8003f4c <I2C_SlaveReceive_BTF>
 80030e0:	e004      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	@ 0x28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003114:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00e      	beq.n	8003140 <HAL_I2C_ER_IRQHandler+0x4e>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800313e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <HAL_I2C_ER_IRQHandler+0x78>
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003168:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	0a9b      	lsrs	r3, r3, #10
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03f      	beq.n	80031f6 <HAL_I2C_ER_IRQHandler+0x104>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d039      	beq.n	80031f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003194:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800319c:	7ebb      	ldrb	r3, [r7, #26]
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d112      	bne.n	80031c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10f      	bne.n	80031c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b21      	cmp	r3, #33	@ 0x21
 80031ac:	d008      	beq.n	80031c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b29      	cmp	r3, #41	@ 0x29
 80031b2:	d005      	beq.n	80031c0 <HAL_I2C_ER_IRQHandler+0xce>
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b28      	cmp	r3, #40	@ 0x28
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b21      	cmp	r3, #33	@ 0x21
 80031be:	d103      	bne.n	80031c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f001 f85f 	bl	8004284 <I2C_Slave_AF>
 80031c6:	e016      	b.n	80031f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031da:	7efb      	ldrb	r3, [r7, #27]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d002      	beq.n	80031e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80031e0:	7efb      	ldrb	r3, [r7, #27]
 80031e2:	2b40      	cmp	r3, #64	@ 0x40
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	0adb      	lsrs	r3, r3, #11
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00e      	beq.n	8003220 <HAL_I2C_ER_IRQHandler+0x12e>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800321e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f001 f89a 	bl	800436c <I2C_ITError>
  }
}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	@ 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d150      	bne.n	8003394 <I2C_MasterTransmit_TXE+0xc8>
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b21      	cmp	r3, #33	@ 0x21
 80032f6:	d14d      	bne.n	8003394 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d01d      	beq.n	800333a <I2C_MasterTransmit_TXE+0x6e>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b20      	cmp	r3, #32
 8003302:	d01a      	beq.n	800333a <I2C_MasterTransmit_TXE+0x6e>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800330a:	d016      	beq.n	800333a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800331a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2211      	movs	r2, #17
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff84 	bl	8003240 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003338:	e060      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003348:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b40      	cmp	r3, #64	@ 0x40
 8003372:	d107      	bne.n	8003384 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff7d 	bl	800327c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003382:	e03b      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff57 	bl	8003240 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003392:	e033      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b21      	cmp	r3, #33	@ 0x21
 8003398:	d005      	beq.n	80033a6 <I2C_MasterTransmit_TXE+0xda>
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d12d      	bne.n	80033fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b22      	cmp	r3, #34	@ 0x22
 80033a4:	d12a      	bne.n	80033fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033c0:	e01c      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d103      	bne.n	80033d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f88e 	bl	80034f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80033d4:	e012      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033fa:	e7ff      	b.n	80033fc <I2C_MasterTransmit_TXE+0x130>
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b21      	cmp	r3, #33	@ 0x21
 800341c:	d164      	bne.n	80034e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800344c:	e04c      	b.n	80034e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d01d      	beq.n	8003490 <I2C_MasterTransmit_BTF+0x8c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d01a      	beq.n	8003490 <I2C_MasterTransmit_BTF+0x8c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003460:	d016      	beq.n	8003490 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003470:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2211      	movs	r2, #17
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fed9 	bl	8003240 <HAL_I2C_MasterTxCpltCallback>
}
 800348e:	e02b      	b.n	80034e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800349e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d107      	bne.n	80034da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fed2 	bl	800327c <HAL_I2C_MemTxCpltCallback>
}
 80034d8:	e006      	b.n	80034e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff feac 	bl	8003240 <HAL_I2C_MasterTxCpltCallback>
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11d      	bne.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10b      	bne.n	8003528 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003514:	b2da      	uxtb	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003520:	1c9a      	adds	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003526:	e077      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352c:	b29b      	uxth	r3, r3
 800352e:	121b      	asrs	r3, r3, #8
 8003530:	b2da      	uxtb	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003542:	e069      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10b      	bne.n	8003564 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003550:	b2da      	uxtb	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003562:	e059      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003568:	2b02      	cmp	r3, #2
 800356a:	d152      	bne.n	8003612 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b22      	cmp	r3, #34	@ 0x22
 8003570:	d10d      	bne.n	800358e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003580:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800358c:	e044      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b21      	cmp	r3, #33	@ 0x21
 800359c:	d112      	bne.n	80035c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035c2:	e029      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d124      	bne.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b21      	cmp	r3, #33	@ 0x21
 80035d2:	d121      	bne.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fe36 	bl	800327c <HAL_I2C_MemTxCpltCallback>
}
 8003610:	e002      	b.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fb06 	bl	8002c24 <I2C_Flush_DR>
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b22      	cmp	r3, #34	@ 0x22
 8003632:	f040 80b9 	bne.w	80037a8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d921      	bls.n	800368e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b03      	cmp	r3, #3
 8003678:	f040 8096 	bne.w	80037a8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800368a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800368c:	e08c      	b.n	80037a8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	2b02      	cmp	r3, #2
 8003694:	d07f      	beq.n	8003796 <I2C_MasterReceive_RXNE+0x176>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d002      	beq.n	80036a2 <I2C_MasterReceive_RXNE+0x82>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d179      	bne.n	8003796 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f001 f83c 	bl	8004720 <I2C_WaitOnSTOPRequestThroughIT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d14c      	bne.n	8003748 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d10a      	bne.n	800371e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fdba 	bl	8003290 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800371c:	e044      	b.n	80037a8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d002      	beq.n	8003732 <I2C_MasterReceive_RXNE+0x112>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d103      	bne.n	800373a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
 8003738:	e002      	b.n	8003740 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2212      	movs	r2, #18
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fd87 	bl	8003254 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003746:	e02f      	b.n	80037a8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003756:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fd88 	bl	80032a4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003794:	e008      	b.n	80037a8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a4:	605a      	str	r2, [r3, #4]
}
 80037a6:	e7ff      	b.n	80037a8 <I2C_MasterReceive_RXNE+0x188>
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037fe:	e0c4      	b.n	800398a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d129      	bne.n	800385e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003818:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00a      	beq.n	8003836 <I2C_MasterReceive_BTF+0x86>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d007      	beq.n	8003836 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800385c:	e095      	b.n	800398a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d17d      	bne.n	8003964 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d002      	beq.n	8003874 <I2C_MasterReceive_BTF+0xc4>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d108      	bne.n	8003886 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e016      	b.n	80038b4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d002      	beq.n	8003892 <I2C_MasterReceive_BTF+0xe2>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d108      	bne.n	80038a4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e007      	b.n	80038b4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800390e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d10a      	bne.n	800393a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fcac 	bl	8003290 <HAL_I2C_MemRxCpltCallback>
}
 8003938:	e027      	b.n	800398a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d002      	beq.n	800394e <I2C_MasterReceive_BTF+0x19e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b20      	cmp	r3, #32
 800394c:	d103      	bne.n	8003956 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
 8003954:	e002      	b.n	800395c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2212      	movs	r2, #18
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fc79 	bl	8003254 <HAL_I2C_MasterRxCpltCallback>
}
 8003962:	e012      	b.n	800398a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d117      	bne.n	80039d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039c0:	e067      	b.n	8003a92 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]
}
 80039d4:	e05d      	b.n	8003a92 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039de:	d133      	bne.n	8003a48 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b21      	cmp	r3, #33	@ 0x21
 80039ea:	d109      	bne.n	8003a00 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	e008      	b.n	8003a12 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <I2C_Master_SB+0x92>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d032      	beq.n	8003a92 <I2C_Master_SB+0x100>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02d      	beq.n	8003a92 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a44:	605a      	str	r2, [r3, #4]
}
 8003a46:	e024      	b.n	8003a92 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10e      	bne.n	8003a6e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	11db      	asrs	r3, r3, #7
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0306 	and.w	r3, r3, #6
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f063 030f 	orn	r3, r3, #15
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]
}
 8003a6c:	e011      	b.n	8003a92 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10d      	bne.n	8003a92 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	11db      	asrs	r3, r3, #7
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 0306 	and.w	r3, r3, #6
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f063 030e 	orn	r3, r3, #14
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <I2C_Master_ADD10+0x26>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <I2C_Master_ADD10+0x48>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae4:	605a      	str	r2, [r3, #4]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b091      	sub	sp, #68	@ 0x44
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b22      	cmp	r3, #34	@ 0x22
 8003b1a:	f040 8169 	bne.w	8003df0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <I2C_Master_ADDR+0x54>
 8003b26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b2a:	2b40      	cmp	r3, #64	@ 0x40
 8003b2c:	d10b      	bne.n	8003b46 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	e160      	b.n	8003e08 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11d      	bne.n	8003b8a <I2C_Master_ADDR+0x98>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b56:	d118      	bne.n	8003b8a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b88:	e13e      	b.n	8003e08 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d113      	bne.n	8003bbc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e115      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	f040 808a 	bne.w	8003cdc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bce:	d137      	bne.n	8003c40 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bde:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bee:	d113      	bne.n	8003c18 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	e0e7      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e0d3      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d02e      	beq.n	8003ca4 <I2C_Master_ADDR+0x1b2>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d02b      	beq.n	8003ca4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d102      	bne.n	8003c58 <I2C_Master_ADDR+0x166>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d125      	bne.n	8003ca4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d00e      	beq.n	8003c7c <I2C_Master_ADDR+0x18a>
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d00b      	beq.n	8003c7c <I2C_Master_ADDR+0x18a>
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d008      	beq.n	8003c7c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e007      	b.n	8003c8c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c8a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	e0a1      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e085      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d14d      	bne.n	8003d82 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d016      	beq.n	8003d1a <I2C_Master_ADDR+0x228>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d013      	beq.n	8003d1a <I2C_Master_ADDR+0x228>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d010      	beq.n	8003d1a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d06:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e007      	b.n	8003d2a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d28:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d38:	d117      	bne.n	8003d6a <I2C_Master_ADDR+0x278>
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d40:	d00b      	beq.n	8003d5a <I2C_Master_ADDR+0x268>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d008      	beq.n	8003d5a <I2C_Master_ADDR+0x268>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d005      	beq.n	8003d5a <I2C_Master_ADDR+0x268>
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d002      	beq.n	8003d5a <I2C_Master_ADDR+0x268>
 8003d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d107      	bne.n	8003d6a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	e032      	b.n	8003de8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d90:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da0:	d117      	bne.n	8003dd2 <I2C_Master_ADDR+0x2e0>
 8003da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003da8:	d00b      	beq.n	8003dc2 <I2C_Master_ADDR+0x2d0>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d008      	beq.n	8003dc2 <I2C_Master_ADDR+0x2d0>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d005      	beq.n	8003dc2 <I2C_Master_ADDR+0x2d0>
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d002      	beq.n	8003dc2 <I2C_Master_ADDR+0x2d0>
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d107      	bne.n	8003dd2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dd0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003dee:	e00b      	b.n	8003e08 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	e7ff      	b.n	8003e08 <I2C_Master_ADDR+0x316>
 8003e08:	bf00      	nop
 8003e0a:	3744      	adds	r7, #68	@ 0x44
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d02b      	beq.n	8003e86 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d114      	bne.n	8003e86 <I2C_SlaveTransmit_TXE+0x72>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b29      	cmp	r3, #41	@ 0x29
 8003e60:	d111      	bne.n	8003e86 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2221      	movs	r2, #33	@ 0x21
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2228      	movs	r2, #40	@ 0x28
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fc ff49 	bl	8000d18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d011      	beq.n	8003ec4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d02c      	beq.n	8003f44 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d114      	bne.n	8003f44 <I2C_SlaveReceive_RXNE+0x74>
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1e:	d111      	bne.n	8003f44 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2222      	movs	r2, #34	@ 0x22
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2228      	movs	r2, #40	@ 0x28
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fedf 	bl	8000d02 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003faa:	2b28      	cmp	r3, #40	@ 0x28
 8003fac:	d127      	bne.n	8003ffe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	09db      	lsrs	r3, r3, #7
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	81bb      	strh	r3, [r7, #12]
 8003fe0:	e002      	b.n	8003fe8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ff0:	89ba      	ldrh	r2, [r7, #12]
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fe71 	bl	8000cde <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ffc:	e00e      	b.n	800401c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004042:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800407c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004080:	d172      	bne.n	8004168 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b22      	cmp	r3, #34	@ 0x22
 8004086:	d002      	beq.n	800408e <I2C_Slave_STOPF+0x6a>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b2a      	cmp	r3, #42	@ 0x2a
 800408c:	d135      	bne.n	80040fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe f8b0 	bl	800222c <HAL_DMA_GetState>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d049      	beq.n	8004166 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	4a69      	ldr	r2, [pc, #420]	@ (800427c <I2C_Slave_STOPF+0x258>)
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fef8 	bl	8001ed4 <HAL_DMA_Abort_IT>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03d      	beq.n	8004166 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040f4:	4610      	mov	r0, r2
 80040f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040f8:	e035      	b.n	8004166 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800412c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe f87a 	bl	800222c <HAL_DMA_GetState>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d014      	beq.n	8004168 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004142:	4a4e      	ldr	r2, [pc, #312]	@ (800427c <I2C_Slave_STOPF+0x258>)
 8004144:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fec2 	bl	8001ed4 <HAL_DMA_Abort_IT>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004160:	4610      	mov	r0, r2
 8004162:	4798      	blx	r3
 8004164:	e000      	b.n	8004168 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004166:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d03e      	beq.n	80041f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d112      	bne.n	80041a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d112      	bne.n	80041da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8b7 	bl	800436c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041fe:	e039      	b.n	8004274 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b2a      	cmp	r3, #42	@ 0x2a
 8004204:	d109      	bne.n	800421a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2228      	movs	r2, #40	@ 0x28
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fc fd74 	bl	8000d02 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b28      	cmp	r3, #40	@ 0x28
 8004224:	d111      	bne.n	800424a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <I2C_Slave_STOPF+0x25c>)
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff f810 	bl	8003268 <HAL_I2C_ListenCpltCallback>
}
 8004248:	e014      	b.n	8004274 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	2b22      	cmp	r3, #34	@ 0x22
 8004250:	d002      	beq.n	8004258 <I2C_Slave_STOPF+0x234>
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b22      	cmp	r3, #34	@ 0x22
 8004256:	d10d      	bne.n	8004274 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fd47 	bl	8000d02 <HAL_I2C_SlaveRxCpltCallback>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	080045d1 	.word	0x080045d1
 8004280:	ffff0000 	.word	0xffff0000

08004284 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d002      	beq.n	80042a6 <I2C_Slave_AF+0x22>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d129      	bne.n	80042fa <I2C_Slave_AF+0x76>
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b28      	cmp	r3, #40	@ 0x28
 80042aa:	d126      	bne.n	80042fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004368 <I2C_Slave_AF+0xe4>)
 80042b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe ffb8 	bl	8003268 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80042f8:	e031      	b.n	800435e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b21      	cmp	r3, #33	@ 0x21
 80042fe:	d129      	bne.n	8004354 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <I2C_Slave_AF+0xe4>)
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800432a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004334:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004344:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe fc6c 	bl	8002c24 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fce3 	bl	8000d18 <HAL_I2C_SlaveTxCpltCallback>
}
 8004352:	e004      	b.n	800435e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800435c:	615a      	str	r2, [r3, #20]
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	ffff0000 	.word	0xffff0000

0800436c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004382:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004384:	7bbb      	ldrb	r3, [r7, #14]
 8004386:	2b10      	cmp	r3, #16
 8004388:	d002      	beq.n	8004390 <I2C_ITError+0x24>
 800438a:	7bbb      	ldrb	r3, [r7, #14]
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d10a      	bne.n	80043a6 <I2C_ITError+0x3a>
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b22      	cmp	r3, #34	@ 0x22
 8004394:	d107      	bne.n	80043a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043ac:	2b28      	cmp	r3, #40	@ 0x28
 80043ae:	d107      	bne.n	80043c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2228      	movs	r2, #40	@ 0x28
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043be:	e015      	b.n	80043ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ce:	d00a      	beq.n	80043e6 <I2C_ITError+0x7a>
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b60      	cmp	r3, #96	@ 0x60
 80043d4:	d007      	beq.n	80043e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fa:	d162      	bne.n	80044c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d020      	beq.n	800445c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441e:	4a6a      	ldr	r2, [pc, #424]	@ (80045c8 <I2C_ITError+0x25c>)
 8004420:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fd54 	bl	8001ed4 <HAL_DMA_Abort_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8089 	beq.w	8004546 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004456:	4610      	mov	r0, r2
 8004458:	4798      	blx	r3
 800445a:	e074      	b.n	8004546 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	4a59      	ldr	r2, [pc, #356]	@ (80045c8 <I2C_ITError+0x25c>)
 8004462:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	4618      	mov	r0, r3
 800446a:	f7fd fd33 	bl	8001ed4 <HAL_DMA_Abort_IT>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d068      	beq.n	8004546 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447e:	2b40      	cmp	r3, #64	@ 0x40
 8004480:	d10b      	bne.n	800449a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044bc:	4610      	mov	r0, r2
 80044be:	4798      	blx	r3
 80044c0:	e041      	b.n	8004546 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b60      	cmp	r3, #96	@ 0x60
 80044cc:	d125      	bne.n	800451a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d10b      	bne.n	8004502 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fe fed0 	bl	80032b8 <HAL_I2C_AbortCpltCallback>
 8004518:	e015      	b.n	8004546 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d10b      	bne.n	8004540 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe feaf 	bl	80032a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10e      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b04      	cmp	r3, #4
 8004596:	d113      	bne.n	80045c0 <I2C_ITError+0x254>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b28      	cmp	r3, #40	@ 0x28
 800459c:	d110      	bne.n	80045c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <I2C_ITError+0x260>)
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fe fe54 	bl	8003268 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	080045d1 	.word	0x080045d1
 80045cc:	ffff0000 	.word	0xffff0000

080045d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004718 <I2C_DMAAbort+0x148>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	08db      	lsrs	r3, r3, #3
 80045f0:	4a4a      	ldr	r2, [pc, #296]	@ (800471c <I2C_DMAAbort+0x14c>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0a1a      	lsrs	r2, r3, #8
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	00da      	lsls	r2, r3, #3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004616:	e00a      	b.n	800462e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3b01      	subs	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462c:	d0ea      	beq.n	8004604 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	2200      	movs	r2, #0
 800463c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	2200      	movs	r2, #0
 800464c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	2200      	movs	r2, #0
 8004682:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b60      	cmp	r3, #96	@ 0x60
 800469e:	d10e      	bne.n	80046be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7fe fdfe 	bl	80032b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046bc:	e027      	b.n	800470e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046c4:	2b28      	cmp	r3, #40	@ 0x28
 80046c6:	d117      	bne.n	80046f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2228      	movs	r2, #40	@ 0x28
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046f6:	e007      	b.n	8004708 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f7fe fdcb 	bl	80032a4 <HAL_I2C_ErrorCallback>
}
 800470e:	bf00      	nop
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000
 800471c:	14f8b589 	.word	0x14f8b589

08004720 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	4a13      	ldr	r2, [pc, #76]	@ (8004780 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0a1a      	lsrs	r2, r3, #8
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b01      	subs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e008      	b.n	8004770 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800476c:	d0e9      	beq.n	8004742 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000000 	.word	0x20000000
 8004780:	14f8b589 	.word	0x14f8b589

08004784 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004794:	d103      	bne.n	800479e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800479c:	e007      	b.n	80047ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80047a6:	d102      	bne.n	80047ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2208      	movs	r2, #8
 80047ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e267      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047da:	4b88      	ldr	r3, [pc, #544]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d00c      	beq.n	8004800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4b85      	ldr	r3, [pc, #532]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d112      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b82      	ldr	r3, [pc, #520]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	4b7e      	ldr	r3, [pc, #504]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05b      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e242      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x74>
 8004822:	4b76      	ldr	r3, [pc, #472]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a75      	ldr	r2, [pc, #468]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483a:	4b70      	ldr	r3, [pc, #448]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6f      	ldr	r2, [pc, #444]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b6d      	ldr	r3, [pc, #436]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6c      	ldr	r2, [pc, #432]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004854:	4b69      	ldr	r3, [pc, #420]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a68      	ldr	r2, [pc, #416]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fc fcda 	bl	800122c <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fc fcd6 	bl	800122c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	@ 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e207      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b5b      	ldr	r3, [pc, #364]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xc0>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fc fcc6 	bl	800122c <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fc fcc2 	bl	800122c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1f3      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	4b51      	ldr	r3, [pc, #324]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048d2:	4b4a      	ldr	r3, [pc, #296]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d11c      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b44      	ldr	r3, [pc, #272]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	4b41      	ldr	r3, [pc, #260]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1c7      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4937      	ldr	r1, [pc, #220]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	e03a      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b34      	ldr	r3, [pc, #208]	@ (8004a00 <HAL_RCC_OscConfig+0x244>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fc fc7b 	bl	800122c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493a:	f7fc fc77 	bl	800122c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e1a8      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4925      	ldr	r1, [pc, #148]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	e015      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496e:	4b24      	ldr	r3, [pc, #144]	@ (8004a00 <HAL_RCC_OscConfig+0x244>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fc fc5a 	bl	800122c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fc fc56 	bl	800122c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e187      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d036      	beq.n	8004a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_RCC_OscConfig+0x248>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fc fc3a 	bl	800122c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fc fc36 	bl	800122c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e167      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x200>
 80049da:	e01b      	b.n	8004a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCC_OscConfig+0x248>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7fc fc23 	bl	800122c <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	e00e      	b.n	8004a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fc fc1f 	bl	800122c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d907      	bls.n	8004a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e150      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	42470000 	.word	0x42470000
 8004a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a08:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ea      	bne.n	80049ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8097 	beq.w	8004b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	4b7d      	ldr	r3, [pc, #500]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a42:	4b7a      	ldr	r3, [pc, #488]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a52:	4b77      	ldr	r3, [pc, #476]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d118      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5e:	4b74      	ldr	r3, [pc, #464]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a73      	ldr	r2, [pc, #460]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a6a:	f7fc fbdf 	bl	800122c <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a72:	f7fc fbdb 	bl	800122c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e10c      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a84:	4b6a      	ldr	r3, [pc, #424]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x2ea>
 8004a98:	4b64      	ldr	r3, [pc, #400]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	4a63      	ldr	r2, [pc, #396]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCC_OscConfig+0x324>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x30c>
 8004aae:	4b5f      	ldr	r3, [pc, #380]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	4b5c      	ldr	r3, [pc, #368]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	4a5b      	ldr	r2, [pc, #364]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0x324>
 8004ac8:	4b58      	ldr	r3, [pc, #352]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4a57      	ldr	r2, [pc, #348]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad4:	4b55      	ldr	r3, [pc, #340]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a54      	ldr	r2, [pc, #336]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fc fba0 	bl	800122c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fc fb9c 	bl	800122c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0cb      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	4b49      	ldr	r3, [pc, #292]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ee      	beq.n	8004af0 <HAL_RCC_OscConfig+0x334>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b14:	f7fc fb8a 	bl	800122c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fc fb86 	bl	800122c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0b5      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b32:	4b3e      	ldr	r3, [pc, #248]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ee      	bne.n	8004b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d105      	bne.n	8004b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b44:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	4a38      	ldr	r2, [pc, #224]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a1 	beq.w	8004c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d05c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d141      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fc fb5a 	bl	800122c <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fc fb56 	bl	800122c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e087      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	491b      	ldr	r1, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fc fb2f 	bl	800122c <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fc fb2b 	bl	800122c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e05c      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be4:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x416>
 8004bf0:	e054      	b.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fc fb18 	bl	800122c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fc fb14 	bl	800122c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e045      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c12:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x444>
 8004c1e:	e03d      	b.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e038      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40007000 	.word	0x40007000
 8004c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCC_OscConfig+0x4ec>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d028      	beq.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d121      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d11a      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0cc      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b68      	ldr	r3, [pc, #416]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d90c      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b65      	ldr	r3, [pc, #404]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b63      	ldr	r3, [pc, #396]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0b8      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d00:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a58      	ldr	r2, [pc, #352]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d18:	4b53      	ldr	r3, [pc, #332]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a52      	ldr	r2, [pc, #328]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b50      	ldr	r3, [pc, #320]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	494d      	ldr	r1, [pc, #308]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d044      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	4b47      	ldr	r3, [pc, #284]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d119      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d003      	beq.n	8004d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e06f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e067      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8a:	4b37      	ldr	r3, [pc, #220]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4934      	ldr	r1, [pc, #208]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d9c:	f7fc fa46 	bl	800122c <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da4:	f7fc fa42 	bl	800122c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e04f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 020c 	and.w	r2, r3, #12
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1eb      	bne.n	8004da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d20c      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b22      	ldr	r3, [pc, #136]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e032      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e00:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4916      	ldr	r1, [pc, #88]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	490e      	ldr	r1, [pc, #56]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e32:	f000 f821 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	490a      	ldr	r1, [pc, #40]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	5ccb      	ldrb	r3, [r1, r3]
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	4a09      	ldr	r2, [pc, #36]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fc f9a6 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40023c00 	.word	0x40023c00
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	08005c38 	.word	0x08005c38
 8004e70:	20000000 	.word	0x20000000
 8004e74:	20000004 	.word	0x20000004

08004e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b094      	sub	sp, #80	@ 0x50
 8004e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e90:	4b79      	ldr	r3, [pc, #484]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	f200 80e1 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x34>
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eaa:	e0db      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b73      	ldr	r3, [pc, #460]	@ (800507c <HAL_RCC_GetSysClockFreq+0x204>)
 8004eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb0:	e0db      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb2:	4b73      	ldr	r3, [pc, #460]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb6:	e0d8      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d063      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004eea:	4622      	mov	r2, r4
 8004eec:	462b      	mov	r3, r5
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	0159      	lsls	r1, r3, #5
 8004ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efc:	0150      	lsls	r0, r2, #5
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4621      	mov	r1, r4
 8004f04:	1a51      	subs	r1, r2, r1
 8004f06:	6139      	str	r1, [r7, #16]
 8004f08:	4629      	mov	r1, r5
 8004f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	018b      	lsls	r3, r1, #6
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f26:	4651      	mov	r1, sl
 8004f28:	018a      	lsls	r2, r1, #6
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f30:	4659      	mov	r1, fp
 8004f32:	eb63 0901 	sbc.w	r9, r3, r1
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4a:	4690      	mov	r8, r2
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	eb18 0303 	adds.w	r3, r8, r3
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	462b      	mov	r3, r5
 8004f58:	eb49 0303 	adc.w	r3, r9, r3
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	024b      	lsls	r3, r1, #9
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f74:	4621      	mov	r1, r4
 8004f76:	024a      	lsls	r2, r1, #9
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7e:	2200      	movs	r2, #0
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f88:	f7fb f91e 	bl	80001c8 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f94:	e058      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f96:	4b38      	ldr	r3, [pc, #224]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	0159      	lsls	r1, r3, #5
 8004fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc2:	0150      	lsls	r0, r2, #5
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4641      	mov	r1, r8
 8004fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fec:	eb63 050b 	sbc.w	r5, r3, fp
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	464b      	mov	r3, r9
 800500c:	eb45 0303 	adc.w	r3, r5, r3
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501e:	4629      	mov	r1, r5
 8005020:	028b      	lsls	r3, r1, #10
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005028:	4621      	mov	r1, r4
 800502a:	028a      	lsls	r2, r1, #10
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005032:	2200      	movs	r2, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	f7fb f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800505a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800506c:	4618      	mov	r0, r3
 800506e:	3750      	adds	r7, #80	@ 0x50
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	007a1200 	.word	0x007a1200

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b03      	ldr	r3, [pc, #12]	@ (8005098 <HAL_RCC_GetHCLKFreq+0x14>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000000 	.word	0x20000000

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff0 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	@ (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08005c48 	.word	0x08005c48

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c8:	f7ff ffdc 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0b5b      	lsrs	r3, r3, #13
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	@ (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	08005c48 	.word	0x08005c48

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07b      	b.n	80051f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fef4 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0104 	and.w	r1, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0210 	and.w	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520e:	f7fc f80d 	bl	800122c <HAL_GetTick>
 8005212:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e12a      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit+0x36>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e122      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_SPI_Transmit+0x48>
 8005242:	2302      	movs	r3, #2
 8005244:	e11b      	b.n	800547e <HAL_SPI_Transmit+0x280>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2203      	movs	r2, #3
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005294:	d10f      	bne.n	80052b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	2b40      	cmp	r3, #64	@ 0x40
 80052c2:	d007      	beq.n	80052d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052dc:	d152      	bne.n	8005384 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_Transmit+0xee>
 80052e6:	8b7b      	ldrh	r3, [r7, #26]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d145      	bne.n	8005378 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	1c9a      	adds	r2, r3, #2
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005310:	e032      	b.n	8005378 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d112      	bne.n	8005346 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	881a      	ldrh	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	1c9a      	adds	r2, r3, #2
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005344:	e018      	b.n	8005378 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005346:	f7fb ff71 	bl	800122c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d803      	bhi.n	800535e <HAL_SPI_Transmit+0x160>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x166>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e082      	b.n	800547e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1c7      	bne.n	8005312 <HAL_SPI_Transmit+0x114>
 8005382:	e053      	b.n	800542c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Transmit+0x194>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d147      	bne.n	8005422 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053b8:	e033      	b.n	8005422 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d113      	bne.n	80053f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053ee:	e018      	b.n	8005422 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f0:	f7fb ff1c 	bl	800122c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d803      	bhi.n	8005408 <HAL_SPI_Transmit+0x20a>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005406:	d102      	bne.n	800540e <HAL_SPI_Transmit+0x210>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e02d      	b.n	800547e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c6      	bne.n	80053ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f8b1 	bl	8005598 <SPI_EndRxTxTransaction>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005498:	f7fb fec8 	bl	800122c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054a8:	f7fb fec0 	bl	800122c <HAL_GetTick>
 80054ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054ae:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	015b      	lsls	r3, r3, #5
 80054b4:	0d1b      	lsrs	r3, r3, #20
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054be:	e055      	b.n	800556c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c6:	d051      	beq.n	800556c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c8:	f7fb feb0 	bl	800122c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d902      	bls.n	80054de <SPI_WaitFlagStateUntilTimeout+0x56>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d13d      	bne.n	800555a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054f6:	d111      	bne.n	800551c <SPI_WaitFlagStateUntilTimeout+0x94>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005500:	d004      	beq.n	800550c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800550a:	d107      	bne.n	800551c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800551a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005524:	d10f      	bne.n	8005546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e018      	b.n	800558c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e002      	b.n	800556c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	3b01      	subs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	429a      	cmp	r2, r3
 8005588:	d19a      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000000 	.word	0x20000000

08005598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2201      	movs	r2, #1
 80055ac:	2102      	movs	r1, #2
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff ff6a 	bl	8005488 <SPI_WaitFlagStateUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e032      	b.n	8005630 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <SPI_EndRxTxTransaction+0xa0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <SPI_EndRxTxTransaction+0xa4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	0d5b      	lsrs	r3, r3, #21
 80055d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e8:	d112      	bne.n	8005610 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2180      	movs	r1, #128	@ 0x80
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff ff47 	bl	8005488 <SPI_WaitFlagStateUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d016      	beq.n	800562e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e00f      	b.n	8005630 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3b01      	subs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d0f2      	beq.n	8005610 <SPI_EndRxTxTransaction+0x78>
 800562a:	e000      	b.n	800562e <SPI_EndRxTxTransaction+0x96>
        break;
 800562c:	bf00      	nop
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000000 	.word	0x20000000
 800563c:	165e9f81 	.word	0x165e9f81

08005640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e042      	b.n	80056d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fca8 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	@ 0x24
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f82b 	bl	80056e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b0c0      	sub	sp, #256	@ 0x100
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	ea40 0301 	orr.w	r3, r0, r1
 8005708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005738:	f021 010c 	bic.w	r1, r1, #12
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005746:	430b      	orrs	r3, r1
 8005748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	6999      	ldr	r1, [r3, #24]
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	ea40 0301 	orr.w	r3, r0, r1
 8005766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8f      	ldr	r3, [pc, #572]	@ (80059ac <UART_SetConfig+0x2cc>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d005      	beq.n	8005780 <UART_SetConfig+0xa0>
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b8d      	ldr	r3, [pc, #564]	@ (80059b0 <UART_SetConfig+0x2d0>)
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7ff fca0 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 8005784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005788:	e003      	b.n	8005792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800578a:	f7ff fc87 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 800578e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800579c:	f040 810c 	bne.w	80059b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057ba:	415b      	adcs	r3, r3
 80057bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057c2:	4621      	mov	r1, r4
 80057c4:	eb12 0801 	adds.w	r8, r2, r1
 80057c8:	4629      	mov	r1, r5
 80057ca:	eb43 0901 	adc.w	r9, r3, r1
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e2:	4690      	mov	r8, r2
 80057e4:	4699      	mov	r9, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	eb18 0303 	adds.w	r3, r8, r3
 80057ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057f0:	462b      	mov	r3, r5
 80057f2:	eb49 0303 	adc.w	r3, r9, r3
 80057f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800580a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800580e:	460b      	mov	r3, r1
 8005810:	18db      	adds	r3, r3, r3
 8005812:	653b      	str	r3, [r7, #80]	@ 0x50
 8005814:	4613      	mov	r3, r2
 8005816:	eb42 0303 	adc.w	r3, r2, r3
 800581a:	657b      	str	r3, [r7, #84]	@ 0x54
 800581c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005824:	f7fa fcd0 	bl	80001c8 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4b61      	ldr	r3, [pc, #388]	@ (80059b4 <UART_SetConfig+0x2d4>)
 800582e:	fba3 2302 	umull	r2, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	011c      	lsls	r4, r3, #4
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	1891      	adds	r1, r2, r2
 800584e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005850:	415b      	adcs	r3, r3
 8005852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005858:	4641      	mov	r1, r8
 800585a:	eb12 0a01 	adds.w	sl, r2, r1
 800585e:	4649      	mov	r1, r9
 8005860:	eb43 0b01 	adc.w	fp, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005878:	4692      	mov	sl, r2
 800587a:	469b      	mov	fp, r3
 800587c:	4643      	mov	r3, r8
 800587e:	eb1a 0303 	adds.w	r3, sl, r3
 8005882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005886:	464b      	mov	r3, r9
 8005888:	eb4b 0303 	adc.w	r3, fp, r3
 800588c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800589c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058a4:	460b      	mov	r3, r1
 80058a6:	18db      	adds	r3, r3, r3
 80058a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80058aa:	4613      	mov	r3, r2
 80058ac:	eb42 0303 	adc.w	r3, r2, r3
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058ba:	f7fa fc85 	bl	80001c8 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	4b3b      	ldr	r3, [pc, #236]	@ (80059b4 <UART_SetConfig+0x2d4>)
 80058c6:	fba3 2301 	umull	r2, r3, r3, r1
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	2264      	movs	r2, #100	@ 0x64
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	1acb      	subs	r3, r1, r3
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058da:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <UART_SetConfig+0x2d4>)
 80058dc:	fba3 2302 	umull	r2, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058e8:	441c      	add	r4, r3
 80058ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	1891      	adds	r1, r2, r2
 8005902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005904:	415b      	adcs	r3, r3
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800590c:	4641      	mov	r1, r8
 800590e:	1851      	adds	r1, r2, r1
 8005910:	6339      	str	r1, [r7, #48]	@ 0x30
 8005912:	4649      	mov	r1, r9
 8005914:	414b      	adcs	r3, r1
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005924:	4659      	mov	r1, fp
 8005926:	00cb      	lsls	r3, r1, #3
 8005928:	4651      	mov	r1, sl
 800592a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592e:	4651      	mov	r1, sl
 8005930:	00ca      	lsls	r2, r1, #3
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	4603      	mov	r3, r0
 8005938:	4642      	mov	r2, r8
 800593a:	189b      	adds	r3, r3, r2
 800593c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005940:	464b      	mov	r3, r9
 8005942:	460a      	mov	r2, r1
 8005944:	eb42 0303 	adc.w	r3, r2, r3
 8005948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800595c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005960:	460b      	mov	r3, r1
 8005962:	18db      	adds	r3, r3, r3
 8005964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005966:	4613      	mov	r3, r2
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800596e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005976:	f7fa fc27 	bl	80001c8 <__aeabi_uldivmod>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <UART_SetConfig+0x2d4>)
 8005980:	fba3 1302 	umull	r1, r3, r3, r2
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	2164      	movs	r1, #100	@ 0x64
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	3332      	adds	r3, #50	@ 0x32
 8005992:	4a08      	ldr	r2, [pc, #32]	@ (80059b4 <UART_SetConfig+0x2d4>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f003 0207 	and.w	r2, r3, #7
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4422      	add	r2, r4
 80059a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a8:	e106      	b.n	8005bb8 <UART_SetConfig+0x4d8>
 80059aa:	bf00      	nop
 80059ac:	40011000 	.word	0x40011000
 80059b0:	40011400 	.word	0x40011400
 80059b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	1891      	adds	r1, r2, r2
 80059d0:	6239      	str	r1, [r7, #32]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059da:	4641      	mov	r1, r8
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	4649      	mov	r1, r9
 80059e0:	eb43 0501 	adc.w	r5, r3, r1
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	00eb      	lsls	r3, r5, #3
 80059ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f2:	00e2      	lsls	r2, r4, #3
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	4643      	mov	r3, r8
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a00:	464b      	mov	r3, r9
 8005a02:	eb45 0303 	adc.w	r3, r5, r3
 8005a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a26:	4629      	mov	r1, r5
 8005a28:	008b      	lsls	r3, r1, #2
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a30:	4621      	mov	r1, r4
 8005a32:	008a      	lsls	r2, r1, #2
 8005a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a38:	f7fa fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4b60      	ldr	r3, [pc, #384]	@ (8005bc4 <UART_SetConfig+0x4e4>)
 8005a42:	fba3 2302 	umull	r2, r3, r3, r2
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	011c      	lsls	r4, r3, #4
 8005a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	1891      	adds	r1, r2, r2
 8005a62:	61b9      	str	r1, [r7, #24]
 8005a64:	415b      	adcs	r3, r3
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	1851      	adds	r1, r2, r1
 8005a70:	6139      	str	r1, [r7, #16]
 8005a72:	4649      	mov	r1, r9
 8005a74:	414b      	adcs	r3, r1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a84:	4659      	mov	r1, fp
 8005a86:	00cb      	lsls	r3, r1, #3
 8005a88:	4651      	mov	r1, sl
 8005a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8e:	4651      	mov	r1, sl
 8005a90:	00ca      	lsls	r2, r1, #3
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	4642      	mov	r2, r8
 8005a9a:	189b      	adds	r3, r3, r2
 8005a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	008b      	lsls	r3, r1, #2
 8005ac8:	4641      	mov	r1, r8
 8005aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ace:	4641      	mov	r1, r8
 8005ad0:	008a      	lsls	r2, r1, #2
 8005ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ad6:	f7fa fb77 	bl	80001c8 <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <UART_SetConfig+0x4e4>)
 8005ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2264      	movs	r2, #100	@ 0x64
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	1acb      	subs	r3, r1, r3
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	3332      	adds	r3, #50	@ 0x32
 8005af4:	4a33      	ldr	r2, [pc, #204]	@ (8005bc4 <UART_SetConfig+0x4e4>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b00:	441c      	add	r4, r3
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	1891      	adds	r1, r2, r2
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	415b      	adcs	r3, r3
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b20:	4641      	mov	r1, r8
 8005b22:	1851      	adds	r1, r2, r1
 8005b24:	6039      	str	r1, [r7, #0]
 8005b26:	4649      	mov	r1, r9
 8005b28:	414b      	adcs	r3, r1
 8005b2a:	607b      	str	r3, [r7, #4]
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b38:	4659      	mov	r1, fp
 8005b3a:	00cb      	lsls	r3, r1, #3
 8005b3c:	4651      	mov	r1, sl
 8005b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b42:	4651      	mov	r1, sl
 8005b44:	00ca      	lsls	r2, r1, #3
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	189b      	adds	r3, r3, r2
 8005b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b52:	464b      	mov	r3, r9
 8005b54:	460a      	mov	r2, r1
 8005b56:	eb42 0303 	adc.w	r3, r2, r3
 8005b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b74:	4649      	mov	r1, r9
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	4641      	mov	r1, r8
 8005b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7e:	4641      	mov	r1, r8
 8005b80:	008a      	lsls	r2, r1, #2
 8005b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b86:	f7fa fb1f 	bl	80001c8 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <UART_SetConfig+0x4e4>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	2164      	movs	r1, #100	@ 0x64
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	3332      	adds	r3, #50	@ 0x32
 8005ba2:	4a08      	ldr	r2, [pc, #32]	@ (8005bc4 <UART_SetConfig+0x4e4>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 020f 	and.w	r2, r3, #15
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4422      	add	r2, r4
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc4:	51eb851f 	.word	0x51eb851f

08005bc8 <memset>:
 8005bc8:	4402      	add	r2, r0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4d0d      	ldr	r5, [pc, #52]	@ (8005c10 <__libc_init_array+0x38>)
 8005bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8005c14 <__libc_init_array+0x3c>)
 8005bde:	1b64      	subs	r4, r4, r5
 8005be0:	10a4      	asrs	r4, r4, #2
 8005be2:	2600      	movs	r6, #0
 8005be4:	42a6      	cmp	r6, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	4d0b      	ldr	r5, [pc, #44]	@ (8005c18 <__libc_init_array+0x40>)
 8005bea:	4c0c      	ldr	r4, [pc, #48]	@ (8005c1c <__libc_init_array+0x44>)
 8005bec:	f000 f818 	bl	8005c20 <_init>
 8005bf0:	1b64      	subs	r4, r4, r5
 8005bf2:	10a4      	asrs	r4, r4, #2
 8005bf4:	2600      	movs	r6, #0
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c00:	4798      	blx	r3
 8005c02:	3601      	adds	r6, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0a:	4798      	blx	r3
 8005c0c:	3601      	adds	r6, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	08005c60 	.word	0x08005c60
 8005c14:	08005c60 	.word	0x08005c60
 8005c18:	08005c60 	.word	0x08005c60
 8005c1c:	08005c64 	.word	0x08005c64

08005c20 <_init>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr

08005c2c <_fini>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr
