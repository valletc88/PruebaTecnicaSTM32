
PruebaTecnicaSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d94  08004d94  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d94  08004d94  00005d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d9c  08004d9c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004da4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000174  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6da  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd1  00000000  00000000  00012716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  000144e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000871  00000000  00000000  00014fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021186  00000000  00000000  00015821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d6d0  00000000  00000000  000369a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0cf  00000000  00000000  00044077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112146  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cd4  00000000  00000000  0011218c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00114e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d5c 	.word	0x08004d5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d5c 	.word	0x08004d5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ADC_Init>:
extern uint8_t registros[];
/**
 * @brief Inicializa el ADC con DMA (puede ser llamado desde main.c)
 */
void ADC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, adc_in, NUM_ADC);
 80004f8:	2202      	movs	r2, #2
 80004fa:	4903      	ldr	r1, [pc, #12]	@ (8000508 <ADC_Init+0x14>)
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <ADC_Init+0x18>)
 80004fe:	f000 fc3d 	bl	8000d7c <HAL_ADC_Start_DMA>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	2000002c 	.word	0x2000002c

08000510 <ADC_ConvCompleteCallback>:

/**
 * @brief Callback que actualiza registros con valores ADC (8 bits)
 */
void ADC_ConvCompleteCallback(ADC_HandleTypeDef* hadc)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <ADC_ConvCompleteCallback+0x3c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10d      	bne.n	800053e <ADC_ConvCompleteCallback+0x2e>
    {
        registros[0] = (uint8_t)(adc_in[0] >> 4);  // Canal 0 → 8 bits
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <ADC_ConvCompleteCallback+0x40>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	091b      	lsrs	r3, r3, #4
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <ADC_ConvCompleteCallback+0x44>)
 800052e:	701a      	strb	r2, [r3, #0]
        registros[1] = (uint8_t)(adc_in[1] >> 4);  // Canal 1 → 8 bits
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <ADC_ConvCompleteCallback+0x40>)
 8000532:	885b      	ldrh	r3, [r3, #2]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <ADC_ConvCompleteCallback+0x44>)
 800053c:	705a      	strb	r2, [r3, #1]
    }
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40012000 	.word	0x40012000
 8000550:	20000028 	.word	0x20000028
 8000554:	20000170 	.word	0x20000170

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fb58 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f80e 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f942 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000568:	f000 f920 	bl	80007ac <MX_DMA_Init>
  MX_ADC1_Init();
 800056c:	f000 f864 	bl	8000638 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000570:	f000 f8c4 	bl	80006fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000574:	f000 f8f0 	bl	8000758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC_Init();
 8000578:	f7ff ffbc 	bl	80004f4 <ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x24>

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fbb8 	bl	8004d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <SystemClock_Config+0xb0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a20      	ldr	r2, [pc, #128]	@ (8000630 <SystemClock_Config+0xb0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <SystemClock_Config+0xb0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <SystemClock_Config+0xb4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000634 <SystemClock_Config+0xb4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <SystemClock_Config+0xb4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fc2c 	bl	8003e4c <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005fa:	f000 f938 	bl	800086e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000602:	2301      	movs	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fe8f 	bl	800433c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000624:	f000 f923 	bl	800086e <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	@ 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800064c:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <MX_ADC1_Init+0xbc>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800065e:	2201      	movs	r2, #1
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000664:	2201      	movs	r2, #1
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000678:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <MX_ADC1_Init+0xc0>)
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000684:	2202      	movs	r2, #2
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 800068a:	2201      	movs	r2, #1
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 8000698:	f000 fb2c 	bl	8000cf4 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f8e4 	bl	800086e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  // Canal PA0 (ADC_CHANNEL_0)
  sConfig.Channel = ADC_CHANNEL_0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006ae:	2307      	movs	r3, #7
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	480e      	ldr	r0, [pc, #56]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 80006b8:	f000 fc88 	bl	8000fcc <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 f8d4 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  // Canal PA1 (ADC_CHANNEL_1)
  sConfig.Channel = ADC_CHANNEL_1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006ce:	2307      	movs	r3, #7
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0xb8>)
 80006d8:	f000 fc78 	bl	8000fcc <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xae>
 80006e2:	f000 f8c4 	bl	800086e <Error_Handler>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2220      	movs	r2, #32
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f001 fd35 	bl	80021a8 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f893 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000d4 	.word	0x200000d4
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_USART1_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000790:	f003 fff4 	bl	800477c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f868 	bl	800086e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000128 	.word	0x20000128
 80007a8:	40011000 	.word	0x40011000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_DMA_Init+0x3c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <MX_DMA_Init+0x3c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_DMA_Init+0x3c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2038      	movs	r0, #56	@ 0x38
 80007d4:	f000 ff75 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d8:	2038      	movs	r0, #56	@ 0x38
 80007da:	f000 ff8e 	bl	80016fa <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_GPIO_Init+0x68>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <MX_GPIO_Init+0x68>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <MX_GPIO_Init+0x68>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_GPIO_Init+0x68>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    ADC_ConvCompleteCallback(hadc);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fe55 	bl	8000510 <ADC_ConvCompleteCallback>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2f      	ldr	r2, [pc, #188]	@ (80009a8 <HAL_ADC_MspInit+0xdc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d157      	bne.n	800099e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 80008f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a26      	ldr	r2, [pc, #152]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <HAL_ADC_MspInit+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000926:	2303      	movs	r3, #3
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	481d      	ldr	r0, [pc, #116]	@ (80009b0 <HAL_ADC_MspInit+0xe4>)
 800093a:	f001 fa99 	bl	8001e70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000940:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <HAL_ADC_MspInit+0xec>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000944:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000950:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000958:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800095c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000964:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800096c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000970:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000974:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800097c:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000984:	f000 fed4 	bl	8001730 <HAL_DMA_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800098e:	f7ff ff6e 	bl	800086e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_ADC_MspInit+0xe8>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40012000 	.word	0x40012000
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000
 80009b4:	20000074 	.word	0x20000074
 80009b8:	40026410 	.word	0x40026410

080009bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_I2C_MspInit+0xa4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d13b      	bne.n	8000a56 <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fa:	23c0      	movs	r3, #192	@ 0xc0
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4814      	ldr	r0, [pc, #80]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a16:	f001 fa2b 	bl	8001e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	201f      	movs	r0, #31
 8000a3c:	f000 fe41 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a40:	201f      	movs	r0, #31
 8000a42:	f000 fe5a 	bl	80016fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2020      	movs	r0, #32
 8000a4c:	f000 fe39 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a50:	2020      	movs	r0, #32
 8000a52:	f000 fe52 	bl	80016fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400

08000a6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ac6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ae4:	f001 f9c4 	bl	8001e70 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	@ 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f8af 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <I2C1_EV_IRQHandler+0x10>)
 8000b62:	f001 fc7a 	bl	800245a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000d4 	.word	0x200000d4

08000b70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <I2C1_ER_IRQHandler+0x10>)
 8000b76:	f001 fde1 	bl	800273c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000d4 	.word	0x200000d4

08000b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <DMA2_Stream0_IRQHandler+0x10>)
 8000b8a:	f000 fef9 	bl	8001980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000074 	.word	0x20000074

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f004 f893 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcb3 	bl	8000558 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08004da4 	.word	0x08004da4
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000180 	.word	0x20000180

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 fd37 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe1a 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fd4f 	bl	8001716 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c90:	f000 fd17 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	2000017c 	.word	0x2000017c

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000017c 	.word	0x2000017c

08000cf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e033      	b.n	8000d72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fdda 	bl	80008cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d118      	bne.n	8000d64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d3a:	f023 0302 	bic.w	r3, r3, #2
 8000d3e:	f043 0202 	orr.w	r2, r3, #2
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 fa62 	bl	8001210 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	f043 0201 	orr.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d62:	e001      	b.n	8000d68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Start_DMA+0x22>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e0eb      	b.n	8000f76 <HAL_ADC_Start_DMA+0x1fa>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d018      	beq.n	8000de6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0201 	orr.w	r2, r2, #1
 8000dc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc4:	4b6e      	ldr	r3, [pc, #440]	@ (8000f80 <HAL_ADC_Start_DMA+0x204>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8000f84 <HAL_ADC_Start_DMA+0x208>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0c9a      	lsrs	r2, r3, #18
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000dd8:	e002      	b.n	8000de0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f9      	bne.n	8000dda <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000df4:	d107      	bne.n	8000e06 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80a3 	bne.w	8000f5c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e54:	d106      	bne.n	8000e64 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f023 0206 	bic.w	r2, r3, #6
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e62:	e002      	b.n	8000e6a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e72:	4b45      	ldr	r3, [pc, #276]	@ (8000f88 <HAL_ADC_Start_DMA+0x20c>)
 8000e74:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e7a:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <HAL_ADC_Start_DMA+0x210>)
 8000e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e82:	4a43      	ldr	r2, [pc, #268]	@ (8000f90 <HAL_ADC_Start_DMA+0x214>)
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8a:	4a42      	ldr	r2, [pc, #264]	@ (8000f94 <HAL_ADC_Start_DMA+0x218>)
 8000e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000ea6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000eb6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	334c      	adds	r3, #76	@ 0x4c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f000 fce0 	bl	800188c <HAL_DMA_Start_IT>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d12a      	bne.n	8000f32 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <HAL_ADC_Start_DMA+0x21c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d015      	beq.n	8000f12 <HAL_ADC_Start_DMA+0x196>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2c      	ldr	r2, [pc, #176]	@ (8000f9c <HAL_ADC_Start_DMA+0x220>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d105      	bne.n	8000efc <HAL_ADC_Start_DMA+0x180>
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <HAL_ADC_Start_DMA+0x20c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_ADC_Start_DMA+0x224>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d136      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <HAL_ADC_Start_DMA+0x20c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d130      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d129      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e020      	b.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_Start_DMA+0x21c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d11b      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d114      	bne.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	e00b      	b.n	8000f74 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f043 0210 	orr.w	r2, r3, #16
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000000 	.word	0x20000000
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	40012300 	.word	0x40012300
 8000f8c:	08001409 	.word	0x08001409
 8000f90:	080014c3 	.word	0x080014c3
 8000f94:	080014df 	.word	0x080014df
 8000f98:	40012000 	.word	0x40012000
 8000f9c:	40012100 	.word	0x40012100
 8000fa0:	40012200 	.word	0x40012200

08000fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1c>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e105      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x228>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b09      	cmp	r3, #9
 8000ff6:	d925      	bls.n	8001044 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68d9      	ldr	r1, [r3, #12]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	3b1e      	subs	r3, #30
 800100e:	2207      	movs	r2, #7
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43da      	mvns	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	400a      	ands	r2, r1
 800101c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68d9      	ldr	r1, [r3, #12]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	4603      	mov	r3, r0
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4403      	add	r3, r0
 8001036:	3b1e      	subs	r3, #30
 8001038:	409a      	lsls	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	e022      	b.n	800108a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6919      	ldr	r1, [r3, #16]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	2207      	movs	r2, #7
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	400a      	ands	r2, r1
 8001066:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6919      	ldr	r1, [r3, #16]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	4603      	mov	r3, r0
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4403      	add	r3, r0
 8001080:	409a      	lsls	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b06      	cmp	r3, #6
 8001090:	d824      	bhi.n	80010dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b05      	subs	r3, #5
 80010a4:	221f      	movs	r2, #31
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	400a      	ands	r2, r1
 80010b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	3b05      	subs	r3, #5
 80010ce:	fa00 f203 	lsl.w	r2, r0, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010da:	e04c      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d824      	bhi.n	800112e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b23      	subs	r3, #35	@ 0x23
 80010f6:	221f      	movs	r2, #31
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43da      	mvns	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	400a      	ands	r2, r1
 8001104:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b23      	subs	r3, #35	@ 0x23
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	631a      	str	r2, [r3, #48]	@ 0x30
 800112c:	e023      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b41      	subs	r3, #65	@ 0x41
 8001140:	221f      	movs	r2, #31
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	400a      	ands	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b41      	subs	r3, #65	@ 0x41
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <HAL_ADC_ConfigChannel+0x234>)
 8001178:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <HAL_ADC_ConfigChannel+0x238>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d109      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1cc>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b12      	cmp	r3, #18
 800118a:	d105      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <HAL_ADC_ConfigChannel+0x238>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d123      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x21e>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d003      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0x1e6>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d11b      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d111      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <HAL_ADC_ConfigChannel+0x23c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_ADC_ConfigChannel+0x240>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9a      	lsrs	r2, r3, #18
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f9      	bne.n	80011de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40012300 	.word	0x40012300
 8001204:	40012000 	.word	0x40012000
 8001208:	20000000 	.word	0x20000000
 800120c:	431bde83 	.word	0x431bde83

08001210 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001218:	4b79      	ldr	r3, [pc, #484]	@ (8001400 <ADC_Init+0x1f0>)
 800121a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	431a      	orrs	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6859      	ldr	r1, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	021a      	lsls	r2, r3, #8
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6859      	ldr	r1, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800128a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6899      	ldr	r1, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	4a58      	ldr	r2, [pc, #352]	@ (8001404 <ADC_Init+0x1f4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d022      	beq.n	80012ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6899      	ldr	r1, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	e00f      	b.n	800130e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800130c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0202 	bic.w	r2, r2, #2
 800131c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6899      	ldr	r1, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7e1b      	ldrb	r3, [r3, #24]
 8001328:	005a      	lsls	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01b      	beq.n	8001374 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800134a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800135a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6859      	ldr	r1, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	3b01      	subs	r3, #1
 8001368:	035a      	lsls	r2, r3, #13
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	e007      	b.n	8001384 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	3b01      	subs	r3, #1
 80013a0:	051a      	lsls	r2, r3, #20
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6899      	ldr	r1, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013c6:	025a      	lsls	r2, r3, #9
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	029a      	lsls	r2, r3, #10
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40012300 	.word	0x40012300
 8001404:	0f000001 	.word	0x0f000001

08001408 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001414:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800141e:	2b00      	cmp	r3, #0
 8001420:	d13c      	bne.n	800149c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d12b      	bne.n	8001494 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001440:	2b00      	cmp	r3, #0
 8001442:	d127      	bne.n	8001494 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145c:	2b00      	cmp	r3, #0
 800145e:	d119      	bne.n	8001494 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0220 	bic.w	r2, r2, #32
 800146e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff f9df 	bl	8000858 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800149a:	e00e      	b.n	80014ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff fd85 	bl	8000fb8 <HAL_ADC_ErrorCallback>
}
 80014ae:	e004      	b.n	80014ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fd67 	bl	8000fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2240      	movs	r2, #64	@ 0x40
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f043 0204 	orr.w	r2, r3, #4
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff fd5a 	bl	8000fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	@ (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	@ (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	@ 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff face 	bl	8000cdc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e099      	b.n	8001880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176c:	e00f      	b.n	800178e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800176e:	f7ff fab5 	bl	8000cdc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b05      	cmp	r3, #5
 800177a:	d908      	bls.n	800178e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e078      	b.n	8001880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e8      	bne.n	800176e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <HAL_DMA_Init+0x158>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d107      	bne.n	80017f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4313      	orrs	r3, r2
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f023 0307 	bic.w	r3, r3, #7
 800180e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	2b04      	cmp	r3, #4
 8001820:	d117      	bne.n	8001852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fa9f 	bl	8001d78 <DMA_CheckFifoParam>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800184e:	2301      	movs	r3, #1
 8001850:	e016      	b.n	8001880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fa56 	bl	8001d0c <DMA_CalcBaseAndBitshift>
 8001860:	4603      	mov	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	223f      	movs	r2, #63	@ 0x3f
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	f010803f 	.word	0xf010803f

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_DMA_Start_IT+0x26>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e040      	b.n	8001934 <HAL_DMA_Start_IT+0xa8>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d12f      	bne.n	8001926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f9e8 	bl	8001cb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	223f      	movs	r2, #63	@ 0x3f
 80018e6:	409a      	lsls	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0216 	orr.w	r2, r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e005      	b.n	8001932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00c      	b.n	8001974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800198c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc8 <HAL_DMA_IRQHandler+0x248>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a8e      	ldr	r2, [pc, #568]	@ (8001bcc <HAL_DMA_IRQHandler+0x24c>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019aa:	2208      	movs	r2, #8
 80019ac:	409a      	lsls	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01a      	beq.n	80019ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0204 	bic.w	r2, r2, #4
 80019d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	2208      	movs	r2, #8
 80019da:	409a      	lsls	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	2201      	movs	r2, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0e:	2201      	movs	r2, #1
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a26:	2204      	movs	r2, #4
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d012      	beq.n	8001a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00b      	beq.n	8001a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	2204      	movs	r2, #4
 8001a46:	409a      	lsls	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a50:	f043 0204 	orr.w	r2, r3, #4
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d043      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03c      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d018      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d024      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
 8001aae:	e01f      	b.n	8001af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01b      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
 8001ac0:	e016      	b.n	8001af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0208 	bic.w	r2, r2, #8
 8001ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2220      	movs	r2, #32
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 808f 	beq.w	8001c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8087 	beq.w	8001c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	2220      	movs	r2, #32
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d136      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0216 	bic.w	r2, r2, #22
 8001b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_DMA_IRQHandler+0x1da>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0208 	bic.w	r2, r2, #8
 8001b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	223f      	movs	r2, #63	@ 0x3f
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d07e      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
        }
        return;
 8001b96:	e079      	b.n	8001c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01d      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d031      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e02c      	b.n	8001c20 <HAL_DMA_IRQHandler+0x2a0>
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
 8001be0:	e01e      	b.n	8001c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10f      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0210 	bic.w	r2, r2, #16
 8001bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d032      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d022      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2205      	movs	r2, #5
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d307      	bcc.n	8001c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f2      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x2cc>
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
 8001c8a:	e000      	b.n	8001c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c8c:	bf00      	nop
    }
  }
}
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ca2:	b2db      	uxtb	r3, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b40      	cmp	r3, #64	@ 0x40
 8001cdc:	d108      	bne.n	8001cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cee:	e007      	b.n	8001d00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3b10      	subs	r3, #16
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <DMA_CalcBaseAndBitshift+0x64>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d26:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <DMA_CalcBaseAndBitshift+0x68>)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d909      	bls.n	8001d4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	1d1a      	adds	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d4c:	e007      	b.n	8001d5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	aaaaaaab 	.word	0xaaaaaaab
 8001d74:	08004d8c 	.word	0x08004d8c

08001d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11f      	bne.n	8001dd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d856      	bhi.n	8001e46 <DMA_CheckFifoParam+0xce>
 8001d98:	a201      	add	r2, pc, #4	@ (adr r2, 8001da0 <DMA_CheckFifoParam+0x28>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001db1 	.word	0x08001db1
 8001da4:	08001dc3 	.word	0x08001dc3
 8001da8:	08001db1 	.word	0x08001db1
 8001dac:	08001e47 	.word	0x08001e47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d046      	beq.n	8001e4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc0:	e043      	b.n	8001e4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dca:	d140      	bne.n	8001e4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd0:	e03d      	b.n	8001e4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dda:	d121      	bne.n	8001e20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d837      	bhi.n	8001e52 <DMA_CheckFifoParam+0xda>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <DMA_CheckFifoParam+0x70>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001dff 	.word	0x08001dff
 8001df0:	08001df9 	.word	0x08001df9
 8001df4:	08001e11 	.word	0x08001e11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfc:	e030      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d025      	beq.n	8001e56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0e:	e022      	b.n	8001e56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e18:	d11f      	bne.n	8001e5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e1e:	e01c      	b.n	8001e5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d903      	bls.n	8001e2e <DMA_CheckFifoParam+0xb6>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d003      	beq.n	8001e34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e2c:	e018      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
      break;
 8001e32:	e015      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
      break;
 8001e44:	e00b      	b.n	8001e5e <DMA_CheckFifoParam+0xe6>
      break;
 8001e46:	bf00      	nop
 8001e48:	e00a      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e008      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e006      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e004      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e002      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e16b      	b.n	8002164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 815a 	bne.w	800215e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d130      	bne.n	8001f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80b4 	beq.w	800215e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b60      	ldr	r3, [pc, #384]	@ (800217c <HAL_GPIO_Init+0x30c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800217c <HAL_GPIO_Init+0x30c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <HAL_GPIO_Init+0x30c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002012:	4a5b      	ldr	r2, [pc, #364]	@ (8002180 <HAL_GPIO_Init+0x310>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_GPIO_Init+0x314>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <HAL_GPIO_Init+0x226>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a51      	ldr	r2, [pc, #324]	@ (8002188 <HAL_GPIO_Init+0x318>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x222>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a50      	ldr	r2, [pc, #320]	@ (800218c <HAL_GPIO_Init+0x31c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x21e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <HAL_GPIO_Init+0x320>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x21a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4e      	ldr	r2, [pc, #312]	@ (8002194 <HAL_GPIO_Init+0x324>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x216>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <HAL_GPIO_Init+0x328>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x212>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	@ (800219c <HAL_GPIO_Init+0x32c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4b      	ldr	r2, [pc, #300]	@ (80021a0 <HAL_GPIO_Init+0x330>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x20a>
 8002076:	2307      	movs	r3, #7
 8002078:	e00e      	b.n	8002098 <HAL_GPIO_Init+0x228>
 800207a:	2308      	movs	r3, #8
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x228>
 800207e:	2306      	movs	r3, #6
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x228>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x228>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x228>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x228>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x228>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x228>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	@ (8002180 <HAL_GPIO_Init+0x310>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a32      	ldr	r2, [pc, #200]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b30      	ldr	r3, [pc, #192]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1d      	ldr	r2, [pc, #116]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae90 	bls.w	8001e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40021400 	.word	0x40021400
 800219c:	40021800 	.word	0x40021800
 80021a0:	40021c00 	.word	0x40021c00
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e12b      	b.n	8002412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fbf4 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	@ 0x24
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800220a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800220c:	f002 fa8e 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a81      	ldr	r2, [pc, #516]	@ (800241c <HAL_I2C_Init+0x274>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d807      	bhi.n	800222c <HAL_I2C_Init+0x84>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a80      	ldr	r2, [pc, #512]	@ (8002420 <HAL_I2C_Init+0x278>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e006      	b.n	800223a <HAL_I2C_Init+0x92>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a7d      	ldr	r2, [pc, #500]	@ (8002424 <HAL_I2C_Init+0x27c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e7      	b.n	8002412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a78      	ldr	r2, [pc, #480]	@ (8002428 <HAL_I2C_Init+0x280>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9b      	lsrs	r3, r3, #18
 800224c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a6a      	ldr	r2, [pc, #424]	@ (800241c <HAL_I2C_Init+0x274>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d802      	bhi.n	800227c <HAL_I2C_Init+0xd4>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	e009      	b.n	8002290 <HAL_I2C_Init+0xe8>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a69      	ldr	r2, [pc, #420]	@ (800242c <HAL_I2C_Init+0x284>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	3301      	adds	r3, #1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	495c      	ldr	r1, [pc, #368]	@ (800241c <HAL_I2C_Init+0x274>)
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d819      	bhi.n	80022e4 <HAL_I2C_Init+0x13c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e59      	subs	r1, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_I2C_Init+0x138>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e59      	subs	r1, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	e051      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e04f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_I2C_Init+0x168>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e012      	b.n	8002336 <HAL_I2C_Init+0x18e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Init+0x196>
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10e      	bne.n	8002364 <HAL_I2C_Init+0x1bc>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e58      	subs	r0, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	fbb0 f3f3 	udiv	r3, r0, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	6809      	ldr	r1, [r1, #0]
 8002388:	4313      	orrs	r3, r2
 800238a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6911      	ldr	r1, [r2, #16]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	000186a0 	.word	0x000186a0
 8002420:	001e847f 	.word	0x001e847f
 8002424:	003d08ff 	.word	0x003d08ff
 8002428:	431bde83 	.word	0x431bde83
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002442:	2b80      	cmp	r3, #128	@ 0x80
 8002444:	d103      	bne.n	800244e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b088      	sub	sp, #32
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800247a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002482:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d003      	beq.n	8002492 <HAL_I2C_EV_IRQHandler+0x38>
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	f040 80c1 	bne.w	8002614 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_I2C_EV_IRQHandler+0x6e>
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80024b2:	d003      	beq.n	80024bc <HAL_I2C_EV_IRQHandler+0x62>
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80024ba:	d101      	bne.n	80024c0 <HAL_I2C_EV_IRQHandler+0x66>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_I2C_EV_IRQHandler+0x68>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f000 8132 	beq.w	800272c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_I2C_EV_IRQHandler+0x92>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	0a5b      	lsrs	r3, r3, #9
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f001 fc98 	bl	8003e14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fd9b 	bl	8003020 <I2C_Master_SB>
 80024ea:	e092      	b.n	8002612 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_I2C_EV_IRQHandler+0xb2>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	0a5b      	lsrs	r3, r3, #9
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fe11 	bl	800312c <I2C_Master_ADD10>
 800250a:	e082      	b.n	8002612 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_I2C_EV_IRQHandler+0xd2>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fe2b 	bl	8003180 <I2C_Master_ADDR>
 800252a:	e072      	b.n	8002612 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03b      	beq.n	80025b0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002546:	f000 80f3 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x11c>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	0a9b      	lsrs	r3, r3, #10
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x11c>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9f3 	bl	800295a <I2C_MasterTransmit_TXE>
 8002574:	e04d      	b.n	8002612 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80d6 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80cf 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	2b21      	cmp	r3, #33	@ 0x21
 8002596:	d103      	bne.n	80025a0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fa7a 	bl	8002a92 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800259e:	e0c7      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	f040 80c4 	bne.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fae8 	bl	8002b7e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	e0bf      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025be:	f000 80b7 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00f      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x194>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	0a9b      	lsrs	r3, r3, #10
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x194>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb61 	bl	8002cae <I2C_MasterReceive_RXNE>
 80025ec:	e011      	b.n	8002612 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 809a 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	0a5b      	lsrs	r3, r3, #9
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8093 	beq.w	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fc17 	bl	8002e3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002610:	e08e      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002612:	e08d      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e007      	b.n	8002636 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_I2C_EV_IRQHandler+0x20e>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	0a5b      	lsrs	r3, r3, #9
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 ffdc 	bl	800361e <I2C_Slave_ADDR>
 8002666:	e066      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_I2C_EV_IRQHandler+0x22e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	0a5b      	lsrs	r3, r3, #9
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 f817 	bl	80036b4 <I2C_Slave_STOPF>
 8002686:	e056      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	2b21      	cmp	r3, #33	@ 0x21
 800268c:	d002      	beq.n	8002694 <HAL_I2C_EV_IRQHandler+0x23a>
 800268e:	7bbb      	ldrb	r3, [r7, #14]
 8002690:	2b29      	cmp	r3, #41	@ 0x29
 8002692:	d125      	bne.n	80026e0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	09db      	lsrs	r3, r3, #7
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00f      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x266>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x266>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fef2 	bl	80034a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026be:	e039      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d033      	beq.n	8002734 <HAL_I2C_EV_IRQHandler+0x2da>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02d      	beq.n	8002734 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 ff1f 	bl	800351c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026de:	e029      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00f      	beq.n	800270c <HAL_I2C_EV_IRQHandler+0x2b2>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <HAL_I2C_EV_IRQHandler+0x2b2>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 ff2a 	bl	800355e <I2C_SlaveReceive_RXNE>
 800270a:	e014      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	0a5b      	lsrs	r3, r3, #9
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 ff58 	bl	80035da <I2C_SlaveReceive_BTF>
 800272a:	e004      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800272c:	bf00      	nop
 800272e:	e002      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002730:	bf00      	nop
 8002732:	e000      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002734:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800275e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <HAL_I2C_ER_IRQHandler+0x4e>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002788:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	0a5b      	lsrs	r3, r3, #9
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <HAL_I2C_ER_IRQHandler+0x78>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80027b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03f      	beq.n	8002840 <HAL_I2C_ER_IRQHandler+0x104>
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d039      	beq.n	8002840 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80027cc:	7efb      	ldrb	r3, [r7, #27]
 80027ce:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027de:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027e6:	7ebb      	ldrb	r3, [r7, #26]
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d112      	bne.n	8002812 <HAL_I2C_ER_IRQHandler+0xd6>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_I2C_ER_IRQHandler+0xd6>
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b21      	cmp	r3, #33	@ 0x21
 80027f6:	d008      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b29      	cmp	r3, #41	@ 0x29
 80027fc:	d005      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0xce>
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b28      	cmp	r3, #40	@ 0x28
 8002802:	d106      	bne.n	8002812 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b21      	cmp	r3, #33	@ 0x21
 8002808:	d103      	bne.n	8002812 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f001 f882 	bl	8003914 <I2C_Slave_AF>
 8002810:	e016      	b.n	8002840 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800281a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002824:	7efb      	ldrb	r3, [r7, #27]
 8002826:	2b10      	cmp	r3, #16
 8002828:	d002      	beq.n	8002830 <HAL_I2C_ER_IRQHandler+0xf4>
 800282a:	7efb      	ldrb	r3, [r7, #27]
 800282c:	2b40      	cmp	r3, #64	@ 0x40
 800282e:	d107      	bne.n	8002840 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <HAL_I2C_ER_IRQHandler+0x12e>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002868:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f001 f8bd 	bl	80039fc <I2C_ITError>
  }
}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	70fb      	strb	r3, [r7, #3]
 80028e6:	4613      	mov	r3, r2
 80028e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002970:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d150      	bne.n	8002a22 <I2C_MasterTransmit_TXE+0xc8>
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b21      	cmp	r3, #33	@ 0x21
 8002984:	d14d      	bne.n	8002a22 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d01d      	beq.n	80029c8 <I2C_MasterTransmit_TXE+0x6e>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d01a      	beq.n	80029c8 <I2C_MasterTransmit_TXE+0x6e>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002998:	d016      	beq.n	80029c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2211      	movs	r2, #17
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff62 	bl	800288a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029c6:	e060      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d107      	bne.n	8002a12 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff7d 	bl	800290a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a10:	e03b      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff35 	bl	800288a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a20:	e033      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b21      	cmp	r3, #33	@ 0x21
 8002a26:	d005      	beq.n	8002a34 <I2C_MasterTransmit_TXE+0xda>
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d12d      	bne.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b22      	cmp	r3, #34	@ 0x22
 8002a32:	d12a      	bne.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a4e:	e01c      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d103      	bne.n	8002a64 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f88e 	bl	8002b7e <I2C_MemoryTransmit_TXE_BTF>
}
 8002a62:	e012      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a88:	e7ff      	b.n	8002a8a <I2C_MasterTransmit_TXE+0x130>
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b21      	cmp	r3, #33	@ 0x21
 8002aaa:	d164      	bne.n	8002b76 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ada:	e04c      	b.n	8002b76 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d01d      	beq.n	8002b1e <I2C_MasterTransmit_BTF+0x8c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d01a      	beq.n	8002b1e <I2C_MasterTransmit_BTF+0x8c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aee:	d016      	beq.n	8002b1e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002afe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2211      	movs	r2, #17
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff feb7 	bl	800288a <HAL_I2C_MasterTxCpltCallback>
}
 8002b1c:	e02b      	b.n	8002b76 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b2c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d107      	bne.n	8002b68 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fed2 	bl	800290a <HAL_I2C_MemTxCpltCallback>
}
 8002b66:	e006      	b.n	8002b76 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fe8a 	bl	800288a <HAL_I2C_MasterTxCpltCallback>
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10b      	bne.n	8002bb6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002bb4:	e077      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	121b      	asrs	r3, r3, #8
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bd0:	e069      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10b      	bne.n	8002bf2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bf0:	e059      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d152      	bne.n	8002ca0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b22      	cmp	r3, #34	@ 0x22
 8002bfe:	d10d      	bne.n	8002c1c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c0e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c1a:	e044      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b21      	cmp	r3, #33	@ 0x21
 8002c2a:	d112      	bne.n	8002c52 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c50:	e029      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d124      	bne.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b21      	cmp	r3, #33	@ 0x21
 8002c60:	d121      	bne.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c70:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fe36 	bl	800290a <HAL_I2C_MemTxCpltCallback>
}
 8002c9e:	e002      	b.n	8002ca6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fbc5 	bl	8002430 <I2C_Flush_DR>
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b22      	cmp	r3, #34	@ 0x22
 8002cc0:	f040 80b9 	bne.w	8002e36 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d921      	bls.n	8002d1c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	f040 8096 	bne.w	8002e36 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d18:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d1a:	e08c      	b.n	8002e36 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d07f      	beq.n	8002e24 <I2C_MasterReceive_RXNE+0x176>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d002      	beq.n	8002d30 <I2C_MasterReceive_RXNE+0x82>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d179      	bne.n	8002e24 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f001 f83d 	bl	8003db0 <I2C_WaitOnSTOPRequestThroughIT>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d14c      	bne.n	8002dd6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b40      	cmp	r3, #64	@ 0x40
 8002d94:	d10a      	bne.n	8002dac <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fdba 	bl	800291e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002daa:	e044      	b.n	8002e36 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d002      	beq.n	8002dc0 <I2C_MasterReceive_RXNE+0x112>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d103      	bne.n	8002dc8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dc6:	e002      	b.n	8002dce <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2212      	movs	r2, #18
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fd65 	bl	800289e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dd4:	e02f      	b.n	8002e36 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002de4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff fd88 	bl	8002932 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e22:	e008      	b.n	8002e36 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e32:	605a      	str	r2, [r3, #4]
}
 8002e34:	e7ff      	b.n	8002e36 <I2C_MasterReceive_RXNE+0x188>
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d11b      	bne.n	8002e8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e8c:	e0c4      	b.n	8003018 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d129      	bne.n	8002eec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00a      	beq.n	8002ec4 <I2C_MasterReceive_BTF+0x86>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d007      	beq.n	8002ec4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002eea:	e095      	b.n	8003018 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d17d      	bne.n	8002ff2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d002      	beq.n	8002f02 <I2C_MasterReceive_BTF+0xc4>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d108      	bne.n	8002f14 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e016      	b.n	8002f42 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <I2C_MasterReceive_BTF+0xe2>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d108      	bne.n	8002f32 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e007      	b.n	8002f42 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d10a      	bne.n	8002fc8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fcac 	bl	800291e <HAL_I2C_MemRxCpltCallback>
}
 8002fc6:	e027      	b.n	8003018 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d002      	beq.n	8002fdc <I2C_MasterReceive_BTF+0x19e>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d103      	bne.n	8002fe4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe2:	e002      	b.n	8002fea <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2212      	movs	r2, #18
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fc57 	bl	800289e <HAL_I2C_MasterRxCpltCallback>
}
 8002ff0:	e012      	b.n	8003018 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d117      	bne.n	8003064 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800304c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800304e:	e067      	b.n	8003120 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]
}
 8003062:	e05d      	b.n	8003120 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800306c:	d133      	bne.n	80030d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b21      	cmp	r3, #33	@ 0x21
 8003078:	d109      	bne.n	800308e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800308a:	611a      	str	r2, [r3, #16]
 800308c:	e008      	b.n	80030a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <I2C_Master_SB+0x92>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d032      	beq.n	8003120 <I2C_Master_SB+0x100>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02d      	beq.n	8003120 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d2:	605a      	str	r2, [r3, #4]
}
 80030d4:	e024      	b.n	8003120 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	11db      	asrs	r3, r3, #7
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 0306 	and.w	r3, r3, #6
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f063 030f 	orn	r3, r3, #15
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]
}
 80030fa:	e011      	b.n	8003120 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10d      	bne.n	8003120 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	b29b      	uxth	r3, r3
 800310a:	11db      	asrs	r3, r3, #7
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 0306 	and.w	r3, r3, #6
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f063 030e 	orn	r3, r3, #14
 8003118:	b2da      	uxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <I2C_Master_ADD10+0x26>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <I2C_Master_ADD10+0x48>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003172:	605a      	str	r2, [r3, #4]
  }
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b091      	sub	sp, #68	@ 0x44
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800318e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b22      	cmp	r3, #34	@ 0x22
 80031a8:	f040 8169 	bne.w	800347e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10f      	bne.n	80031d4 <I2C_Master_ADDR+0x54>
 80031b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d10b      	bne.n	80031d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	e160      	b.n	8003496 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11d      	bne.n	8003218 <I2C_Master_ADDR+0x98>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031e4:	d118      	bne.n	8003218 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800320a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	651a      	str	r2, [r3, #80]	@ 0x50
 8003216:	e13e      	b.n	8003496 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003236:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e115      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 808a 	bne.w	800336a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800325c:	d137      	bne.n	80032ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327c:	d113      	bne.n	80032a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800328c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	e0e7      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e0d3      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d02e      	beq.n	8003332 <I2C_Master_ADDR+0x1b2>
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d02b      	beq.n	8003332 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d102      	bne.n	80032e6 <I2C_Master_ADDR+0x166>
 80032e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d125      	bne.n	8003332 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d00e      	beq.n	800330a <I2C_Master_ADDR+0x18a>
 80032ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d00b      	beq.n	800330a <I2C_Master_ADDR+0x18a>
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d008      	beq.n	800330a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e007      	b.n	800331a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003318:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	e0a1      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003340:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e085      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d14d      	bne.n	8003410 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003376:	2b04      	cmp	r3, #4
 8003378:	d016      	beq.n	80033a8 <I2C_Master_ADDR+0x228>
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	2b02      	cmp	r3, #2
 800337e:	d013      	beq.n	80033a8 <I2C_Master_ADDR+0x228>
 8003380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003382:	2b10      	cmp	r3, #16
 8003384:	d010      	beq.n	80033a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003394:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e007      	b.n	80033b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c6:	d117      	bne.n	80033f8 <I2C_Master_ADDR+0x278>
 80033c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ce:	d00b      	beq.n	80033e8 <I2C_Master_ADDR+0x268>
 80033d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d008      	beq.n	80033e8 <I2C_Master_ADDR+0x268>
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d005      	beq.n	80033e8 <I2C_Master_ADDR+0x268>
 80033dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d002      	beq.n	80033e8 <I2C_Master_ADDR+0x268>
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d107      	bne.n	80033f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	e032      	b.n	8003476 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800341e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800342e:	d117      	bne.n	8003460 <I2C_Master_ADDR+0x2e0>
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003436:	d00b      	beq.n	8003450 <I2C_Master_ADDR+0x2d0>
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	2b01      	cmp	r3, #1
 800343c:	d008      	beq.n	8003450 <I2C_Master_ADDR+0x2d0>
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2b08      	cmp	r3, #8
 8003442:	d005      	beq.n	8003450 <I2C_Master_ADDR+0x2d0>
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	2b10      	cmp	r3, #16
 8003448:	d002      	beq.n	8003450 <I2C_Master_ADDR+0x2d0>
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	2b20      	cmp	r3, #32
 800344e:	d107      	bne.n	8003460 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800345e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800347c:	e00b      	b.n	8003496 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	e7ff      	b.n	8003496 <I2C_Master_ADDR+0x316>
 8003496:	bf00      	nop
 8003498:	3744      	adds	r7, #68	@ 0x44
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02b      	beq.n	8003514 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d114      	bne.n	8003514 <I2C_SlaveTransmit_TXE+0x72>
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b29      	cmp	r3, #41	@ 0x29
 80034ee:	d111      	bne.n	8003514 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2221      	movs	r2, #33	@ 0x21
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2228      	movs	r2, #40	@ 0x28
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff f9cf 	bl	80028b2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02c      	beq.n	80035d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d114      	bne.n	80035d2 <I2C_SlaveReceive_RXNE+0x74>
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ac:	d111      	bne.n	80035d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2222      	movs	r2, #34	@ 0x22
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2228      	movs	r2, #40	@ 0x28
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff f97a 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003638:	2b28      	cmp	r3, #40	@ 0x28
 800363a:	d127      	bne.n	800368c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	09db      	lsrs	r3, r3, #7
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	81bb      	strh	r3, [r7, #12]
 800366e:	e002      	b.n	8003676 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800367e:	89ba      	ldrh	r2, [r7, #12]
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff f928 	bl	80028da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800368a:	e00e      	b.n	80036aa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003700:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003710:	d172      	bne.n	80037f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b22      	cmp	r3, #34	@ 0x22
 8003716:	d002      	beq.n	800371e <I2C_Slave_STOPF+0x6a>
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b2a      	cmp	r3, #42	@ 0x2a
 800371c:	d135      	bne.n	800378a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003750:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fa9c 	bl	8001c94 <HAL_DMA_GetState>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d049      	beq.n	80037f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	4a69      	ldr	r2, [pc, #420]	@ (800390c <I2C_Slave_STOPF+0x258>)
 8003768:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f8e4 	bl	800193c <HAL_DMA_Abort_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d03d      	beq.n	80037f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003784:	4610      	mov	r0, r2
 8003786:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003788:	e035      	b.n	80037f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fa66 	bl	8001c94 <HAL_DMA_GetState>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d014      	beq.n	80037f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d2:	4a4e      	ldr	r2, [pc, #312]	@ (800390c <I2C_Slave_STOPF+0x258>)
 80037d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f8ae 	bl	800193c <HAL_DMA_Abort_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037f0:	4610      	mov	r0, r2
 80037f2:	4798      	blx	r3
 80037f4:	e000      	b.n	80037f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03e      	beq.n	8003880 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d112      	bne.n	8003836 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d112      	bne.n	800386a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f8b7 	bl	80039fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800388e:	e039      	b.n	8003904 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b2a      	cmp	r3, #42	@ 0x2a
 8003894:	d109      	bne.n	80038aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2228      	movs	r2, #40	@ 0x28
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff f80e 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b28      	cmp	r3, #40	@ 0x28
 80038b4:	d111      	bne.n	80038da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <I2C_Slave_STOPF+0x25c>)
 80038ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff f80f 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
}
 80038d8:	e014      	b.n	8003904 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	2b22      	cmp	r3, #34	@ 0x22
 80038e0:	d002      	beq.n	80038e8 <I2C_Slave_STOPF+0x234>
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b22      	cmp	r3, #34	@ 0x22
 80038e6:	d10d      	bne.n	8003904 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fe ffe1 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08003c61 	.word	0x08003c61
 8003910:	ffff0000 	.word	0xffff0000

08003914 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d002      	beq.n	8003936 <I2C_Slave_AF+0x22>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b20      	cmp	r3, #32
 8003934:	d129      	bne.n	800398a <I2C_Slave_AF+0x76>
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b28      	cmp	r3, #40	@ 0x28
 800393a:	d126      	bne.n	800398a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a2e      	ldr	r2, [pc, #184]	@ (80039f8 <I2C_Slave_AF+0xe4>)
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003950:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800395a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe ffb7 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003988:	e031      	b.n	80039ee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b21      	cmp	r3, #33	@ 0x21
 800398e:	d129      	bne.n	80039e4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a19      	ldr	r2, [pc, #100]	@ (80039f8 <I2C_Slave_AF+0xe4>)
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2221      	movs	r2, #33	@ 0x21
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe fd2a 	bl	8002430 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fe ff68 	bl	80028b2 <HAL_I2C_SlaveTxCpltCallback>
}
 80039e2:	e004      	b.n	80039ee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	ffff0000 	.word	0xffff0000

080039fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d002      	beq.n	8003a20 <I2C_ITError+0x24>
 8003a1a:	7bbb      	ldrb	r3, [r7, #14]
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	d10a      	bne.n	8003a36 <I2C_ITError+0x3a>
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b22      	cmp	r3, #34	@ 0x22
 8003a24:	d107      	bne.n	8003a36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a3c:	2b28      	cmp	r3, #40	@ 0x28
 8003a3e:	d107      	bne.n	8003a50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2228      	movs	r2, #40	@ 0x28
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a4e:	e015      	b.n	8003a7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5e:	d00a      	beq.n	8003a76 <I2C_ITError+0x7a>
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b60      	cmp	r3, #96	@ 0x60
 8003a64:	d007      	beq.n	8003a76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8a:	d162      	bne.n	8003b52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d020      	beq.n	8003aec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	4a6a      	ldr	r2, [pc, #424]	@ (8003c58 <I2C_ITError+0x25c>)
 8003ab0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd ff40 	bl	800193c <HAL_DMA_Abort_IT>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8089 	beq.w	8003bd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4798      	blx	r3
 8003aea:	e074      	b.n	8003bd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	4a59      	ldr	r2, [pc, #356]	@ (8003c58 <I2C_ITError+0x25c>)
 8003af2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd ff1f 	bl	800193c <HAL_DMA_Abort_IT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d068      	beq.n	8003bd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d10b      	bne.n	8003b2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
 8003b50:	e041      	b.n	8003bd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b60      	cmp	r3, #96	@ 0x60
 8003b5c:	d125      	bne.n	8003baa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d10b      	bne.n	8003b92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe fecf 	bl	8002946 <HAL_I2C_AbortCpltCallback>
 8003ba8:	e015      	b.n	8003bd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d10b      	bne.n	8003bd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe feae 	bl	8002932 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d113      	bne.n	8003c50 <I2C_ITError+0x254>
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b28      	cmp	r3, #40	@ 0x28
 8003c2c:	d110      	bne.n	8003c50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	@ (8003c5c <I2C_ITError+0x260>)
 8003c32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe fe53 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003c61 	.word	0x08003c61
 8003c5c:	ffff0000 	.word	0xffff0000

08003c60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <I2C_DMAAbort+0x148>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	4a4a      	ldr	r2, [pc, #296]	@ (8003dac <I2C_DMAAbort+0x14c>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a1a      	lsrs	r2, r3, #8
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003ca6:	e00a      	b.n	8003cbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cbc:	d0ea      	beq.n	8003c94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cca:	2200      	movs	r2, #0
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	2200      	movs	r2, #0
 8003cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	2200      	movs	r2, #0
 8003d02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	2200      	movs	r2, #0
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b60      	cmp	r3, #96	@ 0x60
 8003d2e:	d10e      	bne.n	8003d4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7fe fdfd 	bl	8002946 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d4c:	e027      	b.n	8003d9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d54:	2b28      	cmp	r3, #40	@ 0x28
 8003d56:	d117      	bne.n	8003d88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2228      	movs	r2, #40	@ 0x28
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d86:	e007      	b.n	8003d98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f7fe fdca 	bl	8002932 <HAL_I2C_ErrorCallback>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000
 8003dac:	14f8b589 	.word	0x14f8b589

08003db0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	08db      	lsrs	r3, r3, #3
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0a1a      	lsrs	r2, r3, #8
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e008      	b.n	8003e00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfc:	d0e9      	beq.n	8003dd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	14f8b589 	.word	0x14f8b589

08003e14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003e24:	d103      	bne.n	8003e2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e2c:	e007      	b.n	8003e3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003e36:	d102      	bne.n	8003e3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e267      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d075      	beq.n	8003f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e6a:	4b88      	ldr	r3, [pc, #544]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b85      	ldr	r3, [pc, #532]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b82      	ldr	r3, [pc, #520]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b7e      	ldr	r3, [pc, #504]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05b      	beq.n	8003f54 <HAL_RCC_OscConfig+0x108>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d157      	bne.n	8003f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e242      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x74>
 8003eb2:	4b76      	ldr	r3, [pc, #472]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a75      	ldr	r2, [pc, #468]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e01d      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x98>
 8003eca:	4b70      	ldr	r3, [pc, #448]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6f      	ldr	r2, [pc, #444]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6c      	ldr	r2, [pc, #432]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ee4:	4b69      	ldr	r3, [pc, #420]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b66      	ldr	r3, [pc, #408]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a65      	ldr	r2, [pc, #404]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fc feea 	bl	8000cdc <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fc fee6 	bl	8000cdc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e207      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xc0>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fc fed6 	bl	8000cdc <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fc fed2 	bl	8000cdc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1f3      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	4b51      	ldr	r3, [pc, #324]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0xe8>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d063      	beq.n	800402a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f62:	4b4a      	ldr	r3, [pc, #296]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b47      	ldr	r3, [pc, #284]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d11c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7a:	4b44      	ldr	r3, [pc, #272]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	4b41      	ldr	r3, [pc, #260]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e1c7      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4937      	ldr	r1, [pc, #220]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb2:	e03a      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fbc:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <HAL_RCC_OscConfig+0x244>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fc fe8b 	bl	8000cdc <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fca:	f7fc fe87 	bl	8000cdc <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1a8      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b28      	ldr	r3, [pc, #160]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4925      	ldr	r1, [pc, #148]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]
 8003ffc:	e015      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_RCC_OscConfig+0x244>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fc fe6a 	bl	8000cdc <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400c:	f7fc fe66 	bl	8000cdc <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e187      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d036      	beq.n	80040a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_RCC_OscConfig+0x248>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fc fe4a 	bl	8000cdc <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404c:	f7fc fe46 	bl	8000cdc <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e167      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCC_OscConfig+0x240>)
 8004060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x200>
 800406a:	e01b      	b.n	80040a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_OscConfig+0x248>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004072:	f7fc fe33 	bl	8000cdc <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	e00e      	b.n	8004098 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407a:	f7fc fe2f 	bl	8000cdc <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d907      	bls.n	8004098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e150      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 800408c:	40023800 	.word	0x40023800
 8004090:	42470000 	.word	0x42470000
 8004094:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	4b88      	ldr	r3, [pc, #544]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800409a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ea      	bne.n	800407a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8097 	beq.w	80041e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b6:	4b81      	ldr	r3, [pc, #516]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	4b7d      	ldr	r3, [pc, #500]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	4a7c      	ldr	r2, [pc, #496]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d2:	4b7a      	ldr	r3, [pc, #488]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	4b77      	ldr	r3, [pc, #476]	@ (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ee:	4b74      	ldr	r3, [pc, #464]	@ (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a73      	ldr	r2, [pc, #460]	@ (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fc fdef 	bl	8000cdc <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fc fdeb 	bl	8000cdc <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e10c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCC_OscConfig+0x474>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x2ea>
 8004128:	4b64      	ldr	r3, [pc, #400]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	4a63      	ldr	r2, [pc, #396]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	@ 0x70
 8004134:	e01c      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x30c>
 800413e:	4b5f      	ldr	r3, [pc, #380]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	4a5e      	ldr	r2, [pc, #376]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	6713      	str	r3, [r2, #112]	@ 0x70
 800414a:	4b5c      	ldr	r3, [pc, #368]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414e:	4a5b      	ldr	r2, [pc, #364]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	@ 0x70
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004158:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415c:	4a57      	ldr	r2, [pc, #348]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6713      	str	r3, [r2, #112]	@ 0x70
 8004164:	4b55      	ldr	r3, [pc, #340]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	4a54      	ldr	r2, [pc, #336]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 800416a:	f023 0304 	bic.w	r3, r3, #4
 800416e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fc fdb0 	bl	8000cdc <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fc fdac 	bl	8000cdc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0cb      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ee      	beq.n	8004180 <HAL_RCC_OscConfig+0x334>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fc fd9a 	bl	8000cdc <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fc fd96 	bl	8000cdc <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0b5      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c2:	4b3e      	ldr	r3, [pc, #248]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ee      	bne.n	80041ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d4:	4b39      	ldr	r3, [pc, #228]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	4a38      	ldr	r2, [pc, #224]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80a1 	beq.w	800432c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ea:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d05c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d141      	bne.n	8004282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fe:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fc fd6a 	bl	8000cdc <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fc fd66 	bl	8000cdc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e087      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	3b01      	subs	r3, #1
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	491b      	ldr	r1, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fc fd3f 	bl	8000cdc <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004262:	f7fc fd3b 	bl	8000cdc <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e05c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x416>
 8004280:	e054      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fc fd28 	bl	8000cdc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fc fd24 	bl	8000cdc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e045      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x444>
 80042ae:	e03d      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e038      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <HAL_RCC_OscConfig+0x4ec>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d028      	beq.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11a      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7fc fc56 	bl	8000cdc <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fc fc52 	bl	8000cdc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f821 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	@ (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fbb6 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08004d74 	.word	0x08004d74
 8004500:	20000000 	.word	0x20000000
 8004504:	20000004 	.word	0x20000004

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b094      	sub	sp, #80	@ 0x50
 800450e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004520:	4b79      	ldr	r3, [pc, #484]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b08      	cmp	r3, #8
 800452a:	d00d      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x40>
 800452c:	2b08      	cmp	r3, #8
 800452e:	f200 80e1 	bhi.w	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x34>
 8004536:	2b04      	cmp	r3, #4
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x3a>
 800453a:	e0db      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b73      	ldr	r3, [pc, #460]	@ (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004540:	e0db      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004542:	4b73      	ldr	r3, [pc, #460]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x208>)
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004546:	e0d8      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004548:	4b6f      	ldr	r3, [pc, #444]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004550:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004552:	4b6d      	ldr	r3, [pc, #436]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d063      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b6a      	ldr	r3, [pc, #424]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	2200      	movs	r2, #0
 8004566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004568:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
 8004576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	0159      	lsls	r1, r3, #5
 8004588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458c:	0150      	lsls	r0, r2, #5
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4621      	mov	r1, r4
 8004594:	1a51      	subs	r1, r2, r1
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	4629      	mov	r1, r5
 800459a:	eb63 0301 	sbc.w	r3, r3, r1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ac:	4659      	mov	r1, fp
 80045ae:	018b      	lsls	r3, r1, #6
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b6:	4651      	mov	r1, sl
 80045b8:	018a      	lsls	r2, r1, #6
 80045ba:	4651      	mov	r1, sl
 80045bc:	ebb2 0801 	subs.w	r8, r2, r1
 80045c0:	4659      	mov	r1, fp
 80045c2:	eb63 0901 	sbc.w	r9, r3, r1
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	eb18 0303 	adds.w	r3, r8, r3
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	462b      	mov	r3, r5
 80045e8:	eb49 0303 	adc.w	r3, r9, r3
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fa:	4629      	mov	r1, r5
 80045fc:	024b      	lsls	r3, r1, #9
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004604:	4621      	mov	r1, r4
 8004606:	024a      	lsls	r2, r1, #9
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460e:	2200      	movs	r2, #0
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004618:	f7fb fdd6 	bl	80001c8 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004624:	e058      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b38      	ldr	r3, [pc, #224]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	2200      	movs	r2, #0
 800462e:	4618      	mov	r0, r3
 8004630:	4611      	mov	r1, r2
 8004632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
 800463c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	0159      	lsls	r1, r3, #5
 800464e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004652:	0150      	lsls	r0, r2, #5
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4641      	mov	r1, r8
 800465a:	ebb2 0a01 	subs.w	sl, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb63 0b01 	sbc.w	fp, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004678:	ebb2 040a 	subs.w	r4, r2, sl
 800467c:	eb63 050b 	sbc.w	r5, r3, fp
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	00eb      	lsls	r3, r5, #3
 800468a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468e:	00e2      	lsls	r2, r4, #3
 8004690:	4614      	mov	r4, r2
 8004692:	461d      	mov	r5, r3
 8004694:	4643      	mov	r3, r8
 8004696:	18e3      	adds	r3, r4, r3
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	464b      	mov	r3, r9
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ae:	4629      	mov	r1, r5
 80046b0:	028b      	lsls	r3, r1, #10
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046b8:	4621      	mov	r1, r4
 80046ba:	028a      	lsls	r2, r1, #10
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c2:	2200      	movs	r2, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	61fa      	str	r2, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	f7fb fd7c 	bl	80001c8 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	3301      	adds	r3, #1
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3750      	adds	r7, #80	@ 0x50
 8004700:	46bd      	mov	sp, r7
 8004702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400
 8004710:	007a1200 	.word	0x007a1200

08004714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <HAL_RCC_GetHCLKFreq+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000000 	.word	0x20000000

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004730:	f7ff fff0 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0a9b      	lsrs	r3, r3, #10
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	08004d84 	.word	0x08004d84

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004758:	f7ff ffdc 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0b5b      	lsrs	r3, r3, #13
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4903      	ldr	r1, [pc, #12]	@ (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	08004d84 	.word	0x08004d84

0800477c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e042      	b.n	8004814 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc f962 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f82b 	bl	800481c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b0c0      	sub	sp, #256	@ 0x100
 8004822:	af00      	add	r7, sp, #0
 8004824:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	68d9      	ldr	r1, [r3, #12]
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	ea40 0301 	orr.w	r3, r0, r1
 8004844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	431a      	orrs	r2, r3
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004874:	f021 010c 	bic.w	r1, r1, #12
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004896:	6999      	ldr	r1, [r3, #24]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	ea40 0301 	orr.w	r3, r0, r1
 80048a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8f      	ldr	r3, [pc, #572]	@ (8004ae8 <UART_SetConfig+0x2cc>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <UART_SetConfig+0xa0>
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b8d      	ldr	r3, [pc, #564]	@ (8004aec <UART_SetConfig+0x2d0>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d104      	bne.n	80048c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7ff ff4a 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 80048c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048c4:	e003      	b.n	80048ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c6:	f7ff ff31 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 80048ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d8:	f040 810c 	bne.w	8004af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048f6:	415b      	adcs	r3, r3
 80048f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048fe:	4621      	mov	r1, r4
 8004900:	eb12 0801 	adds.w	r8, r2, r1
 8004904:	4629      	mov	r1, r5
 8004906:	eb43 0901 	adc.w	r9, r3, r1
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491e:	4690      	mov	r8, r2
 8004920:	4699      	mov	r9, r3
 8004922:	4623      	mov	r3, r4
 8004924:	eb18 0303 	adds.w	r3, r8, r3
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800492c:	462b      	mov	r3, r5
 800492e:	eb49 0303 	adc.w	r3, r9, r3
 8004932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004942:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800494a:	460b      	mov	r3, r1
 800494c:	18db      	adds	r3, r3, r3
 800494e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004950:	4613      	mov	r3, r2
 8004952:	eb42 0303 	adc.w	r3, r2, r3
 8004956:	657b      	str	r3, [r7, #84]	@ 0x54
 8004958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800495c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004960:	f7fb fc32 	bl	80001c8 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <UART_SetConfig+0x2d4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011c      	lsls	r4, r3, #4
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800497c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800498c:	415b      	adcs	r3, r3
 800498e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004994:	4641      	mov	r1, r8
 8004996:	eb12 0a01 	adds.w	sl, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0b01 	adc.w	fp, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b4:	4692      	mov	sl, r2
 80049b6:	469b      	mov	fp, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	eb1a 0303 	adds.w	r3, sl, r3
 80049be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb4b 0303 	adc.w	r3, fp, r3
 80049c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049e0:	460b      	mov	r3, r1
 80049e2:	18db      	adds	r3, r3, r3
 80049e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049f6:	f7fb fbe7 	bl	80001c8 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2301 	umull	r2, r3, r3, r1
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2264      	movs	r2, #100	@ 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a16:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <UART_SetConfig+0x2d4>)
 8004a18:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a24:	441c      	add	r4, r3
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a40:	415b      	adcs	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ab2:	f7fb fb89 	bl	80001c8 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	@ 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	@ 0x32
 8004ace:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <UART_SetConfig+0x2d4>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 0207 	and.w	r2, r3, #7
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4422      	add	r2, r4
 8004ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae4:	e106      	b.n	8004cf4 <UART_SetConfig+0x4d8>
 8004ae6:	bf00      	nop
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	40011400 	.word	0x40011400
 8004af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004afe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	6239      	str	r1, [r7, #32]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1854      	adds	r4, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0501 	adc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	eb45 0303 	adc.w	r3, r5, r3
 8004b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b62:	4629      	mov	r1, r5
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	008a      	lsls	r2, r1, #2
 8004b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b74:	f7fb fb28 	bl	80001c8 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b60      	ldr	r3, [pc, #384]	@ (8004d00 <UART_SetConfig+0x4e4>)
 8004b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	011c      	lsls	r4, r3, #4
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	61b9      	str	r1, [r7, #24]
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6139      	str	r1, [r7, #16]
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c12:	f7fb fad9 	bl	80001c8 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2264      	movs	r2, #100	@ 0x64
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	1acb      	subs	r3, r1, r3
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	3332      	adds	r3, #50	@ 0x32
 8004c30:	4a33      	ldr	r2, [pc, #204]	@ (8004d00 <UART_SetConfig+0x4e4>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c3c:	441c      	add	r4, r3
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c42:	2200      	movs	r2, #0
 8004c44:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c46:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	415b      	adcs	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	1851      	adds	r1, r2, r1
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	4649      	mov	r1, r9
 8004c64:	414b      	adcs	r3, r1
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c74:	4659      	mov	r1, fp
 8004c76:	00cb      	lsls	r3, r1, #3
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7e:	4651      	mov	r1, sl
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8e:	464b      	mov	r3, r9
 8004c90:	460a      	mov	r2, r1
 8004c92:	eb42 0303 	adc.w	r3, r2, r3
 8004c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cba:	4641      	mov	r1, r8
 8004cbc:	008a      	lsls	r2, r1, #2
 8004cbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cc2:	f7fb fa81 	bl	80001c8 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <UART_SetConfig+0x4e4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	@ 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	3332      	adds	r3, #50	@ 0x32
 8004cde:	4a08      	ldr	r2, [pc, #32]	@ (8004d00 <UART_SetConfig+0x4e4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 020f 	and.w	r2, r3, #15
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4422      	add	r2, r4
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <memset>:
 8004d04:	4402      	add	r2, r0
 8004d06:	4603      	mov	r3, r0
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d100      	bne.n	8004d0e <memset+0xa>
 8004d0c:	4770      	bx	lr
 8004d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d12:	e7f9      	b.n	8004d08 <memset+0x4>

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	@ (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	@ (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	@ (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	@ (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 f818 	bl	8004d5c <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	08004d9c 	.word	0x08004d9c
 8004d50:	08004d9c 	.word	0x08004d9c
 8004d54:	08004d9c 	.word	0x08004d9c
 8004d58:	08004da0 	.word	0x08004da0

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
